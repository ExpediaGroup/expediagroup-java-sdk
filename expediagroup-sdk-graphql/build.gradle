import kotlinx.kover.gradle.plugin.dsl.AggregationType
import kotlinx.kover.gradle.plugin.dsl.CoverageUnit

plugins {
    id 'com.apollographql.apollo' version '4.1.1'
    id 'maven-publish'
    id 'signing'
}

version = project.property("VERSION")
group = project.property("GROUP_ID")

apply from: "$rootDir/gradle-tasks/publish.gradle"
apply from: "$rootDir/gradle-tasks/signing.gradle"

dependencies {
    /* Kotlin */
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.1.10'

    /* Apollo */
    api 'com.apollographql.apollo:apollo-api:4.1.1'

    /* EG SDK Core */
    api 'com.expediagroup:expediagroup-sdk-core:0.0.3-alpha'

    /* Testing */
    testImplementation platform('org.junit:junit-bom:5.11.4')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'io.mockk:mockk:1.13.16'
    testImplementation "com.squareup.okhttp3:mockwebserver:4.12.0"
}

apollo {
    service("testservice") {
        srcDir("src/test/graphql")
        packageName.set("testservice")
        outputDir.set(file("src/test/graphql/generated"))
        generateDataBuilders.set(true)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.named("check") {
    finalizedBy("koverHtmlReport")
}

kover {
    reports {
        filters {
            excludes {
                packages(
                    "testservice",
                    "com.expediagroup.sdk.graphql.model",
                    "com.expediagroup.sdk.graphql.exception",
                    "com.expediagroup.sdk.graphql.paging.model",
                )
            }
        }
        total {
            verify {
                rule {
                    bound {
                        aggregationForGroup = AggregationType.COVERED_PERCENTAGE
                        coverageUnits = CoverageUnit.LINE
                        minValue = 100
                    }
                    bound {
                        aggregationForGroup = AggregationType.COVERED_PERCENTAGE
                        coverageUnits = CoverageUnit.BRANCH
                        minValue = 92
                    }
                }
            }
        }
    }
}
