/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.expediagroup.openworld.sdk.fraudprevention.models

import com.expediagroup.openworld.sdk.fraudprevention.models.Amount
import com.expediagroup.openworld.sdk.fraudprevention.models.HotelAddress
import com.expediagroup.openworld.sdk.fraudprevention.models.TravelProduct
import com.expediagroup.openworld.sdk.fraudprevention.models.TravelProductType

import com.fasterxml.jackson.annotation.JsonProperty
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.Length;

/**
 * 
 * @param hotelId Unique hotel identifier assigned by the partner.
 * @param hotelName Name of the hotel.
 * @param address 
 * @param checkinTime Local date and time of the hotel check-in, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.
 * @param checkoutTime Local date and time of the hotel check-out, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.
 * @param priceWithheld Identifies if the product price was withheld from the customer during the booking process.
 * @param roomCount Total number of rooms booked within the hotel product collection.
 */
data class Hotel(
    @JsonProperty("price")

    
    
    
    
    @field:Valid
    override val price: Amount,


    /* Type of inventory. Ensure attributes mentioned in dictionary below are set to corresponding values only. `inventory_type` has the following mapping with TravelProduct `type` attribute: *       inventory_type            :      type * ------------------------------------------------------ *  `Cruise`                       : `CRUISE` *  `Air`                          : `AIR` *  `Car`                          : `CAR` *  `Insurance`                    : `INSURANCE` *  `Hotel`                        : `HOTEL`  */
@JsonProperty("inventory_type")

    @field:Length(max = 30)
    
    
    
    @field:Valid
    override val inventoryType: kotlin.String,

    /* Identifies the business model through which the supply is being sold. Merchant/Agency. * `MERCHANT` is used when Partner is the merchant of record for this order. * `AGENCY` is used when this order is through an agency booking.  */
@JsonProperty("inventory_source")

    override val inventorySource: TravelProduct.InventorySource,

    /* List of travelerGuids who are part of the traveling party on the order for the product. Information for each product and its required travelers should be provided in the API request. If the product booking does not require accompanying quest information then that does not need to be provided in the API request. Example: * For Air products, all travelers' details are required to complete the booking. * For Hotel products, typically the details on the person checking-in is required. * For Car products, typically only the primary driver information is required. If multiple traveler details are in the itinerary, this structure allows to fill up traveler details once in the `travelers` section, and then associate individual products to the respective travelers. This association is made using `traveler_id` field. A GUID can be generated for each object in the `travelers` section. The same GUID can be provided in the `traveler_references` below. The `travelers` array should have at least one `traveler` object, and each `traveler` object should have a `traveler_id` which is not necessarily an account id. Example: *   Travelers * ------------ *  A - GUID1 *  B - GUID2 *  C - GUID3 * *   Products * ------------ * Air *   [GUID1, GUID2, GUID3] * Hotel *   [GUID1] * Car *   [GUID3] * * Above example shows all three travelers will be associated with the Air product, however only Traveler A will be associated with the Hotel product and only Traveler C will be associated with the Car product.  */
@JsonProperty("travelers_references")

    
    @field:Size(min = 1, max = 40)
    
    
    @field:Valid
    override val travelersReferences: kotlin.collections.List<kotlin.String>,

    /* Unique hotel identifier assigned by the partner. */
@JsonProperty("hotel_id")

    @field:Length(max = 200)
    
    
    
    @field:Valid
    val hotelId: kotlin.String,

    /* Name of the hotel. */
@JsonProperty("hotel_name")

    @field:Length(max = 200)
    
    
    
    @field:Valid
    val hotelName: kotlin.String,

    @JsonProperty("address")

    
    
    
    
    @field:Valid
    val address: HotelAddress,

    /* Local date and time of the hotel check-in, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`. */
@JsonProperty("checkin_time")

    val checkinTime: java.time.OffsetDateTime,

    /* Local date and time of the hotel check-out, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`. */
@JsonProperty("checkout_time")

    val checkoutTime: java.time.OffsetDateTime,

    /* Identifies if the product price was withheld from the customer during the booking process. */
@JsonProperty("price_withheld")

    
    
    
    
    @field:Valid
    val priceWithheld: kotlin.Boolean? = null,

    /* Total number of rooms booked within the hotel product collection. */
@JsonProperty("room_count")

    val roomCount: kotlin.Int? = null
) : TravelProduct {
    @JsonProperty("type")
override val type : TravelProductType = TravelProductType.HOTEL



    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var price: Amount? = null,
        private var inventoryType: kotlin.String? = null,
        private var inventorySource: TravelProduct.InventorySource? = null,
        private var travelersReferences: kotlin.collections.List<kotlin.String>? = null,
        private var hotelId: kotlin.String? = null,
        private var hotelName: kotlin.String? = null,
        private var address: HotelAddress? = null,
        private var checkinTime: java.time.OffsetDateTime? = null,
        private var checkoutTime: java.time.OffsetDateTime? = null,
        private var priceWithheld: kotlin.Boolean? = null,
        private var roomCount: kotlin.Int? = null
    ) {
        fun price(price: Amount) = apply { this.price = price }
        fun inventoryType(inventoryType: kotlin.String) = apply { this.inventoryType = inventoryType }
        fun inventorySource(inventorySource: TravelProduct.InventorySource) = apply { this.inventorySource = inventorySource }
        fun travelersReferences(travelersReferences: kotlin.collections.List<kotlin.String>) = apply { this.travelersReferences = travelersReferences }
        fun hotelId(hotelId: kotlin.String) = apply { this.hotelId = hotelId }
        fun hotelName(hotelName: kotlin.String) = apply { this.hotelName = hotelName }
        fun address(address: HotelAddress) = apply { this.address = address }
        fun checkinTime(checkinTime: java.time.OffsetDateTime) = apply { this.checkinTime = checkinTime }
        fun checkoutTime(checkoutTime: java.time.OffsetDateTime) = apply { this.checkoutTime = checkoutTime }
        fun priceWithheld(priceWithheld: kotlin.Boolean) = apply { this.priceWithheld = priceWithheld }
        fun roomCount(roomCount: kotlin.Int) = apply { this.roomCount = roomCount }

        fun build(): Hotel {
            // Check required params
            validateNullity()
            return Hotel(
                price = price!!,
                inventoryType = inventoryType!!,
                inventorySource = inventorySource!!,
                travelersReferences = travelersReferences!!,
                hotelId = hotelId!!,
                hotelName = hotelName!!,
                address = address!!,
                checkinTime = checkinTime!!,
                checkoutTime = checkoutTime!!,
                priceWithheld = priceWithheld,
                roomCount = roomCount
            )
        }

        private fun validateNullity() {
            if (price == null) {
                throw NullPointerException("Required parameter price is missing")
            }
            if (inventoryType == null) {
                throw NullPointerException("Required parameter inventoryType is missing")
            }
            if (inventorySource == null) {
                throw NullPointerException("Required parameter inventorySource is missing")
            }
            if (travelersReferences == null) {
                throw NullPointerException("Required parameter travelersReferences is missing")
            }
            if (hotelId == null) {
                throw NullPointerException("Required parameter hotelId is missing")
            }
            if (hotelName == null) {
                throw NullPointerException("Required parameter hotelName is missing")
            }
            if (address == null) {
                throw NullPointerException("Required parameter address is missing")
            }
            if (checkinTime == null) {
                throw NullPointerException("Required parameter checkinTime is missing")
            }
            if (checkoutTime == null) {
                throw NullPointerException("Required parameter checkoutTime is missing")
            }
        }
    }
}

