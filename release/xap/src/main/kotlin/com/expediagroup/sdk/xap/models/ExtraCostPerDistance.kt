/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.xap.models

import com.expediagroup.sdk.xap.models.CarDistance
import com.expediagroup.sdk.xap.models.CarMoney
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import javax.validation.Valid
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

/**
 * Extra cost for each increment of distance used.
 * @param distance
 * @param cost
 */
data class ExtraCostPerDistance(
    @JsonProperty("Distance")
    @field:Valid
    val distance: CarDistance,
    @JsonProperty("Cost")
    @field:Valid
    val cost: CarMoney
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var distance: CarDistance? = null,
        private var cost: CarMoney? = null
    ) {
        fun distance(distance: CarDistance) = apply { this.distance = distance }

        fun cost(cost: CarMoney) = apply { this.cost = cost }

        fun build(): ExtraCostPerDistance {
            // Check required params
            validateNullity()
            return ExtraCostPerDistance(
                distance = distance!!,
                cost = cost!!
            )
        }

        private fun validateNullity() {
            if (distance == null) {
                throw NullPointerException("Required parameter distance is missing")
            }
            if (cost == null) {
                throw NullPointerException("Required parameter cost is missing")
            }
        }
    }

    fun toBuilder() =
        Builder(
            distance = distance!!,
            cost = cost!!
        )
}
