/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.xap.models

import com.expediagroup.sdk.xap.models.RatePlanPriceBaseRate
import com.expediagroup.sdk.xap.models.RatePlanPriceHotelMandatoryFees
import com.expediagroup.sdk.xap.models.RatePlanPriceTaxesAndFees
import com.expediagroup.sdk.xap.models.RoomTypePriceAvgNightlyRate
import com.expediagroup.sdk.xap.models.RoomTypePriceAvgNightlyRateWithFees
import com.expediagroup.sdk.xap.models.RoomTypePriceAvgNightlyStrikeOutRate
import com.expediagroup.sdk.xap.models.RoomTypePriceAvgNightlyStrikeoutRateWithFees
import com.expediagroup.sdk.xap.models.RoomTypePriceRefundableDamageDeposit
import com.expediagroup.sdk.xap.models.RoomTypePriceTotalPrice
import com.expediagroup.sdk.xap.models.RoomTypePriceTotalPriceWithHotelFees
import com.expediagroup.sdk.xap.models.RoomTypePriceTotalStrikeOutPrice
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import javax.validation.Valid
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

/**
 * Container of all price components of the room.
 * @param totalPrice
 * @param avgNightlyRate
 * @param totalPriceWithHotelFees
 * @param baseRate
 * @param taxesAndFees
 * @param totalStrikeOutPrice
 * @param avgNightlyStrikeOutRate
 * @param avgNightlyRateWithFees
 * @param avgNightlyStrikeoutRateWithFees
 * @param hotelMandatoryFees
 * @param refundableDamageDeposit
 */
data class RoomTypePrice(
    @JsonProperty("TotalPrice")
    @field:Valid
    val totalPrice: RoomTypePriceTotalPrice,
    @JsonProperty("AvgNightlyRate")
    @field:Valid
    val avgNightlyRate: RoomTypePriceAvgNightlyRate,
    @JsonProperty("TotalPriceWithHotelFees")
    @field:Valid
    val totalPriceWithHotelFees: RoomTypePriceTotalPriceWithHotelFees,
    @JsonProperty("BaseRate")
    @field:Valid
    val baseRate: RatePlanPriceBaseRate? = null,
    @JsonProperty("TaxesAndFees")
    @field:Valid
    val taxesAndFees: RatePlanPriceTaxesAndFees? = null,
    @JsonProperty("TotalStrikeOutPrice")
    @field:Valid
    val totalStrikeOutPrice: RoomTypePriceTotalStrikeOutPrice? = null,
    @JsonProperty("AvgNightlyStrikeOutRate")
    @field:Valid
    val avgNightlyStrikeOutRate: RoomTypePriceAvgNightlyStrikeOutRate? = null,
    @JsonProperty("AvgNightlyRateWithFees")
    @field:Valid
    val avgNightlyRateWithFees: RoomTypePriceAvgNightlyRateWithFees? = null,
    @JsonProperty("AvgNightlyStrikeoutRateWithFees")
    @field:Valid
    val avgNightlyStrikeoutRateWithFees: RoomTypePriceAvgNightlyStrikeoutRateWithFees? = null,
    @JsonProperty("HotelMandatoryFees")
    @field:Valid
    val hotelMandatoryFees: RatePlanPriceHotelMandatoryFees? = null,
    @JsonProperty("RefundableDamageDeposit")
    @field:Valid
    val refundableDamageDeposit: RoomTypePriceRefundableDamageDeposit? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var totalPrice: RoomTypePriceTotalPrice? = null,
        private var avgNightlyRate: RoomTypePriceAvgNightlyRate? = null,
        private var totalPriceWithHotelFees: RoomTypePriceTotalPriceWithHotelFees? = null,
        private var baseRate: RatePlanPriceBaseRate? = null,
        private var taxesAndFees: RatePlanPriceTaxesAndFees? = null,
        private var totalStrikeOutPrice: RoomTypePriceTotalStrikeOutPrice? = null,
        private var avgNightlyStrikeOutRate: RoomTypePriceAvgNightlyStrikeOutRate? = null,
        private var avgNightlyRateWithFees: RoomTypePriceAvgNightlyRateWithFees? = null,
        private var avgNightlyStrikeoutRateWithFees: RoomTypePriceAvgNightlyStrikeoutRateWithFees? = null,
        private var hotelMandatoryFees: RatePlanPriceHotelMandatoryFees? = null,
        private var refundableDamageDeposit: RoomTypePriceRefundableDamageDeposit? = null
    ) {
        fun totalPrice(totalPrice: RoomTypePriceTotalPrice) = apply { this.totalPrice = totalPrice }

        fun avgNightlyRate(avgNightlyRate: RoomTypePriceAvgNightlyRate) = apply { this.avgNightlyRate = avgNightlyRate }

        fun totalPriceWithHotelFees(totalPriceWithHotelFees: RoomTypePriceTotalPriceWithHotelFees) = apply { this.totalPriceWithHotelFees = totalPriceWithHotelFees }

        fun baseRate(baseRate: RatePlanPriceBaseRate?) = apply { this.baseRate = baseRate }

        fun taxesAndFees(taxesAndFees: RatePlanPriceTaxesAndFees?) = apply { this.taxesAndFees = taxesAndFees }

        fun totalStrikeOutPrice(totalStrikeOutPrice: RoomTypePriceTotalStrikeOutPrice?) = apply { this.totalStrikeOutPrice = totalStrikeOutPrice }

        fun avgNightlyStrikeOutRate(avgNightlyStrikeOutRate: RoomTypePriceAvgNightlyStrikeOutRate?) = apply { this.avgNightlyStrikeOutRate = avgNightlyStrikeOutRate }

        fun avgNightlyRateWithFees(avgNightlyRateWithFees: RoomTypePriceAvgNightlyRateWithFees?) = apply { this.avgNightlyRateWithFees = avgNightlyRateWithFees }

        fun avgNightlyStrikeoutRateWithFees(avgNightlyStrikeoutRateWithFees: RoomTypePriceAvgNightlyStrikeoutRateWithFees?) =
            apply { this.avgNightlyStrikeoutRateWithFees = avgNightlyStrikeoutRateWithFees }

        fun hotelMandatoryFees(hotelMandatoryFees: RatePlanPriceHotelMandatoryFees?) = apply { this.hotelMandatoryFees = hotelMandatoryFees }

        fun refundableDamageDeposit(refundableDamageDeposit: RoomTypePriceRefundableDamageDeposit?) = apply { this.refundableDamageDeposit = refundableDamageDeposit }

        fun build(): RoomTypePrice {
            // Check required params
            validateNullity()
            return RoomTypePrice(
                totalPrice = totalPrice!!,
                avgNightlyRate = avgNightlyRate!!,
                totalPriceWithHotelFees = totalPriceWithHotelFees!!,
                baseRate = baseRate,
                taxesAndFees = taxesAndFees,
                totalStrikeOutPrice = totalStrikeOutPrice,
                avgNightlyStrikeOutRate = avgNightlyStrikeOutRate,
                avgNightlyRateWithFees = avgNightlyRateWithFees,
                avgNightlyStrikeoutRateWithFees = avgNightlyStrikeoutRateWithFees,
                hotelMandatoryFees = hotelMandatoryFees,
                refundableDamageDeposit = refundableDamageDeposit
            )
        }

        private fun validateNullity() {
            if (totalPrice == null) {
                throw NullPointerException("Required parameter totalPrice is missing")
            }
            if (avgNightlyRate == null) {
                throw NullPointerException("Required parameter avgNightlyRate is missing")
            }
            if (totalPriceWithHotelFees == null) {
                throw NullPointerException("Required parameter totalPriceWithHotelFees is missing")
            }
        }
    }
}
