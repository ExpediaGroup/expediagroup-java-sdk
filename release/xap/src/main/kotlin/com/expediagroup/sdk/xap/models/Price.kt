/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.xap.models

import com.expediagroup.sdk.xap.models.CarMoney
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import javax.validation.Valid
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

/**
 * Pricing information for the rental.
 * @param totalPrice
 * @param ratePeriodUnitPrice
 * @param basePrice
 * @param taxesAndFees
 * @param totalPriceDueAtBooking
 */
data class Price(
    @JsonProperty("TotalPrice")
    @field:Valid
    val totalPrice: CarMoney,
    @JsonProperty("RatePeriodUnitPrice")
    @field:Valid
    val ratePeriodUnitPrice: CarMoney? = null,
    @JsonProperty("BasePrice")
    @field:Valid
    val basePrice: CarMoney? = null,
    @JsonProperty("TaxesAndFees")
    @field:Valid
    val taxesAndFees: CarMoney? = null,
    @JsonProperty("TotalPriceDueAtBooking")
    @field:Valid
    val totalPriceDueAtBooking: CarMoney? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var totalPrice: CarMoney? = null,
        private var ratePeriodUnitPrice: CarMoney? = null,
        private var basePrice: CarMoney? = null,
        private var taxesAndFees: CarMoney? = null,
        private var totalPriceDueAtBooking: CarMoney? = null
    ) {
        fun totalPrice(totalPrice: CarMoney) = apply { this.totalPrice = totalPrice }

        fun ratePeriodUnitPrice(ratePeriodUnitPrice: CarMoney?) = apply { this.ratePeriodUnitPrice = ratePeriodUnitPrice }

        fun basePrice(basePrice: CarMoney?) = apply { this.basePrice = basePrice }

        fun taxesAndFees(taxesAndFees: CarMoney?) = apply { this.taxesAndFees = taxesAndFees }

        fun totalPriceDueAtBooking(totalPriceDueAtBooking: CarMoney?) = apply { this.totalPriceDueAtBooking = totalPriceDueAtBooking }

        fun build(): Price {
            // Check required params
            validateNullity()
            return Price(
                totalPrice = totalPrice!!,
                ratePeriodUnitPrice = ratePeriodUnitPrice,
                basePrice = basePrice,
                taxesAndFees = taxesAndFees,
                totalPriceDueAtBooking = totalPriceDueAtBooking
            )
        }

        private fun validateNullity() {
            if (totalPrice == null) {
                throw NullPointerException("Required parameter totalPrice is missing")
            }
        }
    }

    fun toBuilder() =
        Builder(
            totalPrice = totalPrice!!,
            ratePeriodUnitPrice = ratePeriodUnitPrice,
            basePrice = basePrice,
            taxesAndFees = taxesAndFees,
            totalPriceDueAtBooking = totalPriceDueAtBooking
        )
}
