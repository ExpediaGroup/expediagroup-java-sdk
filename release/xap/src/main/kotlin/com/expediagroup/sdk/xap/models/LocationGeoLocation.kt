/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.xap.models

import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import javax.validation.Valid
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

/**
 *
 * @param latitude The geographic coordinates of the hotel property, based on a horizontal angular measurement relative to The Equator.  North latitude will be represented by a positive value.  South latitude will be represented by a negative value.
 * @param longitude The geographic coordinates of the hotel property, based on a vertical angular measurement relative to the universal Prime Meridian (Royal Observatory, Greenwich).  East longitude will be represented by a positive value.  West longitude will be represented by a negative value.
 * @param obfuscated Indicates whether the displayed Latitude/Longitude information is obfuscated.  Note: Exact Lat/Long values for Vacation Rental properties will not be shown in either XAPv3 Search or Details responses to respect the security of the homeowner. Instead an 'obfuscated' Lat/Long value will be returned that will indicate the general area within which the property is located, but not the exact location of the property itself.
 */
data class LocationGeoLocation(
    // The geographic coordinates of the hotel property, based on a horizontal angular measurement relative to The Equator.  North latitude will be represented by a positive value.  South latitude will be represented by a negative value.
    @JsonProperty("Latitude")
    @field:Valid
    val latitude: kotlin.String,
    // The geographic coordinates of the hotel property, based on a vertical angular measurement relative to the universal Prime Meridian (Royal Observatory, Greenwich).  East longitude will be represented by a positive value.  West longitude will be represented by a negative value.
    @JsonProperty("Longitude")
    @field:Valid
    val longitude: kotlin.String,
    // Indicates whether the displayed Latitude/Longitude information is obfuscated.  Note: Exact Lat/Long values for Vacation Rental properties will not be shown in either XAPv3 Search or Details responses to respect the security of the homeowner. Instead an 'obfuscated' Lat/Long value will be returned that will indicate the general area within which the property is located, but not the exact location of the property itself.
    @JsonProperty("Obfuscated")
    @field:Valid
    val obfuscated: kotlin.Boolean? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var latitude: kotlin.String? = null,
        private var longitude: kotlin.String? = null,
        private var obfuscated: kotlin.Boolean? = null
    ) {
        fun latitude(latitude: kotlin.String) = apply { this.latitude = latitude }

        fun longitude(longitude: kotlin.String) = apply { this.longitude = longitude }

        fun obfuscated(obfuscated: kotlin.Boolean?) = apply { this.obfuscated = obfuscated }

        fun build(): LocationGeoLocation {
            // Check required params
            validateNullity()
            return LocationGeoLocation(
                latitude = latitude!!,
                longitude = longitude!!,
                obfuscated = obfuscated
            )
        }

        private fun validateNullity() {
            if (latitude == null) {
                throw NullPointerException("Required parameter latitude is missing")
            }
            if (longitude == null) {
                throw NullPointerException("Required parameter longitude is missing")
            }
        }
    }
}
