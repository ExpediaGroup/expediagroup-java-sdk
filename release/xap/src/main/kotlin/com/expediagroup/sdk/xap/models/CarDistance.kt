/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.xap.models

import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import javax.validation.Valid
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

/**
 * The extra distance information.
 * @param `value` The number of miles/kilometers of the distance (specified by the Unit).
 * @param unit The unit (KM or MI) for the distance.
 * @param direction The direction of the location from the search 'center'.Possible values are: N,S,W,E,NW,NE,SW,SE
 */
data class CarDistance(
    // The number of miles/kilometers of the distance (specified by the Unit).
    @JsonProperty("Value")
    @field:Valid
    val `value`: kotlin.String,
    // The unit (KM or MI) for the distance.
    @JsonProperty("Unit")
    @field:Valid
    val unit: kotlin.String? = null,
    // The direction of the location from the search 'center'.Possible values are: N,S,W,E,NW,NE,SW,SE
    @JsonProperty("Direction")
    @field:Valid
    val direction: kotlin.String? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var `value`: kotlin.String? = null,
        private var unit: kotlin.String? = null,
        private var direction: kotlin.String? = null
    ) {
        fun `value`(`value`: kotlin.String) = apply { this.`value` = `value` }

        fun unit(unit: kotlin.String?) = apply { this.unit = unit }

        fun direction(direction: kotlin.String?) = apply { this.direction = direction }

        fun build(): CarDistance {
            // Check required params
            validateNullity()
            return CarDistance(
                `value` = `value`!!,
                unit = unit,
                direction = direction
            )
        }

        private fun validateNullity() {
            if (`value` == null) {
                throw NullPointerException("Required parameter `value` is missing")
            }
        }
    }

    fun toBuilder() =
        Builder(
            `value` = `value`!!,
            unit = unit,
            direction = direction
        )
}
