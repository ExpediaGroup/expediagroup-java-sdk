/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.xap.models

import com.expediagroup.sdk.xap.models.CancellationPenaltyRule
import com.expediagroup.sdk.xap.models.NonRefundableDateRange
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import javax.validation.Valid
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

/**
 * Container for room cancellation policy.
 * @param cancellableOnline Boolean value to identify if the reservation can be cancelled online. If false, the customer will only be able to cancel a refundable room by calling Expedia Customer Service.
 * @param refundable Indicate whether the rate is refundable or not.
 * @param freeCancellation Indicate whether the room can be cancelled free of charge.
 * @param freeCancellationEndDateTime The date and time until which the room can be cancelled free of charge.  This is expressed in the local time of the Hotel.
 * @param cancellationPenaltyRules Container for cancellation penalty details.
 * @param cancelPolicyDescription Additional cancellation policy information available as static text.
 * @param nonRefundableDateRanges A list of dates ranges that are non-refundable.  **Note**: The stay dates in those date ranges will always be charged whenever there is any cancellation penalty rule.
 */
data class CancellationPolicy(
    // Boolean value to identify if the reservation can be cancelled online. If false, the customer will only be able to cancel a refundable room by calling Expedia Customer Service.
    @JsonProperty("CancellableOnline")
    @field:Valid
    val cancellableOnline: kotlin.Boolean? = null,
    // Indicate whether the rate is refundable or not.
    @JsonProperty("Refundable")
    @field:Valid
    val refundable: kotlin.Boolean? = null,
    // Indicate whether the room can be cancelled free of charge.
    @JsonProperty("FreeCancellation")
    @field:Valid
    val freeCancellation: kotlin.Boolean? = null,
    // The date and time until which the room can be cancelled free of charge.  This is expressed in the local time of the Hotel.
    @JsonProperty("FreeCancellationEndDateTime")
    val freeCancellationEndDateTime: java.time.OffsetDateTime? = null,
    // Container for cancellation penalty details.
    @JsonProperty("CancellationPenaltyRules")
    @field:Valid
    val cancellationPenaltyRules: kotlin.collections.List<CancellationPenaltyRule>? = null,
    // Additional cancellation policy information available as static text.
    @JsonProperty("CancelPolicyDescription")
    @field:Valid
    val cancelPolicyDescription: kotlin.String? = null,
    // A list of dates ranges that are non-refundable.  **Note**: The stay dates in those date ranges will always be charged whenever there is any cancellation penalty rule.
    @JsonProperty("NonRefundableDateRanges")
    @field:Valid
    val nonRefundableDateRanges: kotlin.collections.List<NonRefundableDateRange>? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var cancellableOnline: kotlin.Boolean? = null,
        private var refundable: kotlin.Boolean? = null,
        private var freeCancellation: kotlin.Boolean? = null,
        private var freeCancellationEndDateTime: java.time.OffsetDateTime? = null,
        private var cancellationPenaltyRules: kotlin.collections.List<CancellationPenaltyRule>? = null,
        private var cancelPolicyDescription: kotlin.String? = null,
        private var nonRefundableDateRanges: kotlin.collections.List<NonRefundableDateRange>? = null
    ) {
        fun cancellableOnline(cancellableOnline: kotlin.Boolean?) = apply { this.cancellableOnline = cancellableOnline }

        fun refundable(refundable: kotlin.Boolean?) = apply { this.refundable = refundable }

        fun freeCancellation(freeCancellation: kotlin.Boolean?) = apply { this.freeCancellation = freeCancellation }

        fun freeCancellationEndDateTime(freeCancellationEndDateTime: java.time.OffsetDateTime?) = apply { this.freeCancellationEndDateTime = freeCancellationEndDateTime }

        fun cancellationPenaltyRules(cancellationPenaltyRules: kotlin.collections.List<CancellationPenaltyRule>?) = apply { this.cancellationPenaltyRules = cancellationPenaltyRules }

        fun cancelPolicyDescription(cancelPolicyDescription: kotlin.String?) = apply { this.cancelPolicyDescription = cancelPolicyDescription }

        fun nonRefundableDateRanges(nonRefundableDateRanges: kotlin.collections.List<NonRefundableDateRange>?) = apply { this.nonRefundableDateRanges = nonRefundableDateRanges }

        fun build(): CancellationPolicy {
            return CancellationPolicy(
                cancellableOnline = cancellableOnline,
                refundable = refundable,
                freeCancellation = freeCancellation,
                freeCancellationEndDateTime = freeCancellationEndDateTime,
                cancellationPenaltyRules = cancellationPenaltyRules,
                cancelPolicyDescription = cancelPolicyDescription,
                nonRefundableDateRanges = nonRefundableDateRanges
            )
        }
    }
}
