/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.xap.models

import com.expediagroup.sdk.xap.models.CarMoney
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.constraints.Length
import javax.validation.Valid
import javax.validation.constraints.Max
import javax.validation.constraints.Min
import javax.validation.constraints.Pattern
import javax.validation.constraints.Size

/**
 * Description and costs of any optional special equipment that may be rented with the car.
 * @param code Special equipment code
 * @param name Special equipment name
 * @param ratePeriod Unit indicating the price of special equipment. Support value:Trip,Daily
 * @param price
 */
data class Equipment(
    // Special equipment code
    @JsonProperty("Code")
    @field:Valid
    val code: kotlin.String,
    // Special equipment name
    @JsonProperty("Name")
    @field:Valid
    val name: kotlin.String,
    // Unit indicating the price of special equipment. Support value:Trip,Daily
    @JsonProperty("RatePeriod")
    @field:Valid
    val ratePeriod: kotlin.String,
    @JsonProperty("Price")
    @field:Valid
    val price: CarMoney? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var code: kotlin.String? = null,
        private var name: kotlin.String? = null,
        private var ratePeriod: kotlin.String? = null,
        private var price: CarMoney? = null
    ) {
        fun code(code: kotlin.String) = apply { this.code = code }

        fun name(name: kotlin.String) = apply { this.name = name }

        fun ratePeriod(ratePeriod: kotlin.String) = apply { this.ratePeriod = ratePeriod }

        fun price(price: CarMoney?) = apply { this.price = price }

        fun build(): Equipment {
            // Check required params
            validateNullity()
            return Equipment(
                code = code!!,
                name = name!!,
                ratePeriod = ratePeriod!!,
                price = price
            )
        }

        private fun validateNullity() {
            if (code == null) {
                throw NullPointerException("Required parameter code is missing")
            }
            if (name == null) {
                throw NullPointerException("Required parameter name is missing")
            }
            if (ratePeriod == null) {
                throw NullPointerException("Required parameter ratePeriod is missing")
            }
        }
    }

    fun toBuilder() =
        Builder(
            code = code!!,
            name = name!!,
            ratePeriod = ratePeriod!!,
            price = price
        )
}
