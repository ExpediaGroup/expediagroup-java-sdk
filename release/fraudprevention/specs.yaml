openapi: 3.0.0
info:
  title: Fraud Prevention Service
  version: 'v1'
  description: "Fraud & Risk APIs to detect fraud"
  contact:
    name: "Risk Tech Platform Core"
    email: "RiskTechPlatformCore@expedia.com"
  x-eg-lifecycle: "PLANNED"
servers:
  - url: 'https://api.expediagroup.com/test/fraud-prevention'
tags:
  - name: OrderPurchaseScreen
  - name: OrderPurchaseUpdate
paths:
  '/order/purchase/screen':
    post:
      tags:
        - OrderPurchaseScreen
      description: 'The Order Purchase API gives a Fraud recommendation for a transaction. A recommendation can be Accept, Reject, or Review. A transaction is marked as Review whenever there are insufficient signals to recommend Accept or Reject. These incidents are manually reviewed, and a corrected recommendation is made asynchronously. '
      summary: 'Run fraud screening for one transaction'
      operationId: 'screen'
      security:
        - orderPurchaseScreenAuth:
            - fraudandrisk.stub.order-purchase-screen
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrderPurchaseScreenRequest'
      parameters:
        - $ref: '#/components/parameters/contentType'
      responses:
        '200':
          description: 'The OrderPurchaseScreenRequest was successfully received and the order screening is complete.'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OrderPurchaseScreenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/AuthenticationRequired'
        '403':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: "#/components/responses/InternalServerError"

  '/order/purchase/update':
    post:
      tags:
        - OrderPurchaseUpdate
      description: |
        The Order Purchase Update API is called when the status of the order has changed.

        For example, if the customer cancels the reservation, changes reservation in any way, or adds additional products or travelers to the reservation, the Order Purchase Update API is called to notify Expedia Group about the change.

        The Order Purchase Update API is also called when the merchant cancels or changes an order based on a Fraud recommendation.
      summary: 'Send an update for a transaction'
      operationId: 'update'
      security:
        - orderPurchaseUpdateAuth:
            - fraudandrisk.stub.order-purchase-update
      requestBody:
        required: true
        description: |
          An OrderPurchaseUpdate request may be of one of the following types `ORDER_UPDATE`, `CHARGEBACK_FEEDBACK`, `INSULT_FEEDBACK`, `REFUND_UPDATE`, `PAYMENT_UPDATE`.
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/OrderPurchaseUpdateRequest"
            examples:
              OrderUpdate:
                summary: Sample OrderUpdate Request
                value:
                  type: ORDER_UPDATE
                  risk_id: '1234324324'
                  order_status: COMPLETED
                  cancellation_reason:
                    primary_reason_description: string
              ChargebackFeedback:
                summary: Sample ChargebackFeedback Request
                value:
                  type: CHARGEBACK_FEEDBACK
                  risk_id: '1234324324'
                  chargeback_detail:
                    chargeback_reason: FRAUD
                    chargeback_amount: 123.45
                    currency_code: "USD"
              InsultFeedback:
                summary: Sample InsultFeedback Request
                value:
                  type: INSULT_FEEDBACK
                  risk_id: '1234324324'
              RefundUpdate:
                summary: Sample RefundUpdate Request
                value:
                  type: REFUND_UPDATE
                  risk_id: "1234324324"
                  acquirer_reference_number: "12345"
                  refund_deposit_timestamp: "2022-07-24T01:01:01.111Z"
                  refund_settlement_timestamp: "2022-07-24T01:01:01.111Z"
                  settlement_id: "12345"
                  refund_amount:
                    value: 123.32
                    currency_code: "USD"
              PaymentUpdate:
                summary: Sample PaymentUpdate Request
                value:
                  type: PAYMENT_UPDATE
                  risk_id: "1234324324"
                  merchant_order_code: "12345"

      parameters:
        - $ref: '#/components/parameters/contentType'
      responses:
        '200':
          description: 'The OrderUpdateRequest was successful.'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/AuthenticationRequired'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '429':
          $ref: "#/components/responses/TooManyRequests"
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    OrderPurchaseUpdateRequest:
      type: object
      required:
        - risk_id
        - type
      properties:
        type:
          $ref: '#/components/schemas/UpdateType'
        risk_id:
          description: 'The `risk_id` provided by Expedia''s Fraud Prevention Service in the `OrderPurchaseScreenResponse`.'
          type: string
          maxLength: 200
          example: '123456789'
      discriminator:
        propertyName: type
        mapping:
          ORDER_UPDATE: OrderUpdate
          CHARGEBACK_FEEDBACK: ChargebackFeedback
          INSULT_FEEDBACK: InsultFeedback
          REFUND_UPDATE: RefundUpdate
          PAYMENT_UPDATE: PaymentUpdate
    UpdateType:
      description: 'Transaction type associated with the update event.'
      type: string
      enum:
        - ORDER_UPDATE
        - CHARGEBACK_FEEDBACK
        - INSULT_FEEDBACK
        - REFUND_UPDATE
        - PAYMENT_UPDATE
    OrderUpdate:
      allOf:
        - $ref: '#/components/schemas/OrderPurchaseUpdateRequest'
        - type: object
          required:
            - order_status
          properties:
            order_status:
              $ref: '#/components/schemas/Status'
            cancellation_reason:
              $ref: '#/components/schemas/CancellationReason'
    CancellationReason:
      description: 'Reason of order update cancellation.'
      type: object
      required:
        - primary_reason_description
      properties:
        primary_reason_code:
          description: 'Primary cancellation reason code.'
          type: string
          maxLength: 200
        sub_reason_code:
          description: 'Substitute cancellation reason code.'
          type: string
          maxLength: 200
        primary_reason_description:
          description: 'Primary cancellation reason code. Required if `order_status = CANCELLED`.'
          type: string
          maxLength: 200
        sub_reason_description:
          description: 'Substitute cancellation reason description.'
          type: string
          maxLength: 200
    ChargebackFeedback:
      allOf:
        - $ref: '#/components/schemas/OrderPurchaseUpdateRequest'
        - type: object
          properties:
            chargeback_detail:
              $ref: '#/components/schemas/ChargebackDetail'
    InsultFeedback:
      allOf:
        - $ref: '#/components/schemas/OrderPurchaseUpdateRequest'
        - type: object
          properties:
            insult_detail:
              $ref: '#/components/schemas/InsultDetail'
    RefundUpdate:
      allOf:
        - $ref: "#/components/schemas/OrderPurchaseUpdateRequest"
        - type: object
          required:
            - acquirer_reference_number
            - refund_deposit_timestamp
            - refund_settlement_timestamp
            - settlement_id
            - refund_amount
          properties:
            acquirer_reference_number:
              description: "A unique number that tags a credit or debit card transaction when it goes from the merchant's bank through to the cardholder's bank."
              type: string
              maxLength: 200
            refund_deposit_timestamp:
              description: "Date and time when the refund was deposited to the original form of payment."
              type: string
              format: date-time
            refund_settlement_timestamp:
              description: "Date and time when the 3rd party payment processor confirmed that a previously submitted payment refund has settled at the participating financial institutions."
              type: string
              format: date-time
            settlement_id:
              description: "Unique settlement identifier generated for a previously submitted payment refund."
              type: string
              maxLength: 200
            refund_amount:
              $ref: "#/components/schemas/Amount"
    PaymentUpdate:
      allOf:
        - $ref: "#/components/schemas/OrderPurchaseUpdateRequest"
        - type: object
          required:
            - merchant_order_code
          properties:
            merchant_order_code:
              description: "Reference code passed to acquiring bank at the time of payment. This code is the key ID that ties back to payments data at the payment level."
              type: string
              maxLength: 200
    ChargebackDetail:
      type: object
      description: 'Details related to the chargeback.'
      required:
        - chargeback_reason
        - chargeback_amount
        - currency_code
      properties:
        chargeback_reason:
          type: string
          enum:
            - FRAUD
            - NON_FRAUD
          description: 'Reason for chargeback which can be `Fraud` or `Non Fraud`.'
        chargeback_amount:
          type: number
          format: double
          description: 'Chargeback amount received by the partner.'
          maxLength: 200
        currency_code:
          description: 'The 3-letter currency code defined in ISO 4217. https://www.currency-iso.org/dam/downloads/lists/list_one.xml.'
          type: string
          pattern: ^[A-Z]{3}$
          maxLength: 200
        bank_reason_code:
          type: string
          description: 'Unique code provided by the acquiring bank for the category of fraud.'
          maxLength: 200
        chargeback_reported_timestamp:
          type: string
          format: date-time
          description: 'Date and time when the chargeback was reported to the partner, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
    InsultDetail:
      type: object
      description: 'Details related to the insult.'
      properties:
        insult_reported_timestamp:
          type: string
          format: date-time
          description: 'Date and time when the insult was reported to the partner, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
    Status:
      description: 'Defines the current state of the Order.'
      type: string
      enum:
        - COMPLETED
        - CHANGE_COMPLETED
        - CANCELLED
        - FAILED
        - CHANGE_FAILED
      maxLength: 200
    OrderPurchaseScreenRequest:
      type: object
      properties:
        transaction:
          $ref: '#/components/schemas/OrderPurchaseTransaction'
    OrderPurchaseTransaction:
      type: object
      required:
        - site_info
        - device_details
        - customer_account
        - transaction_details
      properties:
        site_info:
          $ref: '#/components/schemas/SiteInfo'
        device_details:
          $ref: '#/components/schemas/DeviceDetails'
        customer_account:
          $ref: '#/components/schemas/CustomerAccount'
        transaction_details:
          $ref: '#/components/schemas/TransactionDetails'
        bypass_risk_flag:
          type: boolean
          description: 'A flag to indicate whether the client is ignoring the decision by Trust validation and proceeds to process the even in-case the outcome is ‘Reject’ or ‘Review’.'
    OrderPurchaseScreenResponse:
      type: object
      properties:
        risk_id:
          type: string
          maxLength: 200
          example: '1234567'
        decision:
          $ref: '#/components/schemas/FraudDecision'
        error_detail:
          $ref: '#/components/schemas/ErrorDetail'
    FraudDecision:
      type: string
      enum:
        - ACCEPT
        - REVIEW
        - REJECT
    ErrorDetail:
      type: object
      description: 'Error details in case of any errors.'
      properties:
        code:
          type: integer
          format: int32
        message:
          description: 'Description of the error. Clients may choose to use the description field to display to end clients.'
          type: string
          maxLength: 200
        detailed_message:
          description: 'Detailed description of the error.'
          type: string
          maxLength: 500
    ExtendedError:
      description: The object used the describe an error, containing both human-readable and in a machine-readable information.
      title: ExtendedError
      type: object
      properties:
        type:
          description: >
            A URI reference, compliant with the standard EG error type format, which identifies the error type.
            It provides a machine-readable identifier for the error type.
            The error type will be aligned with the HTTP status code of the response.
            The URI can either be absolute or relative to the API's base URI.
            When dereferenced, it can also provide human-readable documentation for the error type.
          type: string
          format: uri
          example: "https://apis.expediagroup.com/errors/common/invalid-argument"
        detail:
          description: A human-readable explanation of the error, specific to this error occurrence.
          type: string
          example: "The request failed because one or many input values are invalid. Please see the causes for more details."
        causes:
          description: 'An array of cause objects, that identify the specific causes of the error.'
          type: array
          items:
            $ref: '#/components/schemas/ErrorCause'
      required:
        - type
        - detail
    Error:
      description: The object used the describe an error, containing both human-readable and in a machine-readable information.
      title: Error
      type: object
      properties:
        type:
          description: >
            A URI reference, compliant with the standard EG error type format, which identifies the error type.
            It provides a machine-readable identifier for the error type.
            The error type will be aligned with the HTTP status code of the response.
            The URI can either be absolute or relative to the API's base URI.
            When dereferenced, it can also provide human-readable documentation for the error type.
          type: string
          format: uri
          example: "https://apis.expediagroup.com/errors/common/invalid-argument"
        detail:
          description: A human-readable explanation of the error, specific to this error occurrence.
          type: string
          example: "The request failed because one or many input values are invalid. Please see the causes for more details."
      required:
        - type
        - detail
    ErrorCause:
      description: The object used to describe a cause for an error, containing both human-readable and in a machine-readable information.
      title: Cause
      type: object
      properties:
        type:
          description: >
            A URI reference, compliant with the standard EG error type format, which identifies the cause type.
            It provides a machine-readable identifier for the cause type.
            The cause type will be aligned with the error type.
            The URI can either be absolute or relative to the API's base URI.
            When dereferenced, it provides human-readable documentation for the cause type.
          type: string
          format: uri
          example: "https://apis.expediagroup.com/errors/common/invalid-number"
        detail:
          description: A human-readable explanation of the cause, specific to this cause occurrence.
          type: string
          example: "The number of results per page you provided ('NotANumber') is invalid. Please provide a valid integer value between 1 and 100."
        location:
          description: |
            The location of the element in the request that identifies this specific cause. When specified, the `name` will be specified and when applicable, the `value` as well. Can be one of:
            * `HEADER` - When an error has been identified in one of the request headers.
            * `PATH` - When an error has been identified in one of the path parameters.
            * `QUERY` - When an error has been identified in one of the query parameters.
            * `BODY` - When an error has been identified in the request body.
          type: string
          enum:
            - HEADER
            - PATH
            - QUERY
            - BODY
          example: QUERY
        name:
          description: |
            The name of the element for this cause. When specified, the `location` will be specified and when applicable, the `value` as well. This name is a function of the value of the `location` property:
              * When the `location` is set to `HEADER`, this will be the name of the request header (e.g. `Content-Type`).
              * When the `location` is set to `PATH`, this will be the name of the path parameter (e.g. in a path defined as `/users/{user_id}`, the value would be `user_id`).
              * When the `location` is set to `QUERY`, this will be the name of the query string parameter (e.g. `offset`).
              * When the `location` is set to `BODY`, this will one of the field names specified in the body of the request.
                * For a top level field, it should only be set to the field name (e.g. `firstName`).
                * For a field in a nested object, it may contain the path to reach the field (e.g. `address.city`).
                * For a field in an object part of collection, it may contain the index in the collection (e.g. `permissions[0].name`).
          type: string
          example: "results_per_page"
        value:
          description: >
            A string representation of the erroneous value of the element identified in `name`, perceived to be the cause of the error.
            When specified, the `location` and `name` should be specified as well.
            This value may be omitted in cases where it cannot be provided (e.g. missing require field), or the erroneous value cannot be represented as a string.
          type: string
          example: "NotANumber"
      required:
        - type
        - detail
    SiteInfo:
      type: object
      required:
        - country_code
        - agent_assisted
      properties:
        country_code:
          description: 'The alpha-3 ISO code that represents a country name.'
          pattern: ^[A-Z]{3}$
          type: string
          example: 'USA'
        agent_assisted:
          description: 'Identifies if an agent assisted in booking travel for the customer. `False` if the order was directly booked by customer.'
          type: boolean
    DeviceDetails:
      required:
        - device_box
      type: object
      properties:
        source:
          type: string
          maxLength: 50
          description: 'Source of the device_box. Default value is `TrustWidget`.'
        device_box:
          type: string
          maxLength: 16000
          description: 'Device related information retrieved from TrustWidget.'
        ip_address:
          type: string
          description: "IP address of the device used for booking."
          pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}$
          example: "192.168.32.48"
    TransactionDetails:
      required:
        - order_id
        - current_order_status
        - order_type
        - travel_products
        - travelers
        - payments
      type: object
      properties:
        order_id:
          description: 'Unique identifier assigned to the order by the partner. `order_id` is specific to the partner namespace.'
          type: string
          maxLength: 50
          example: '1000000234'
        current_order_status:
          description: 'Status of the order.'
          type: string
          enum:
            - IN_PROGRESS
            - COMPLETED
        order_type:
          description: |
            Type of order. Possible `order_types`.

            `CREATE` - Initial type of a brand new order.

            `CHANGE` - If a `OrderPurchaseScreenRequest` has already been submitted for the initial booking with `order_type = CREATE`, but has now been modified and partner wishes to resubmit for Fraud screening then the `order_type = CHANGE`. Examples of changes that are supported are changes made to `check-in/checkout dates` or `price of a TravelProduct`.
          type: string
          enum:
            - CREATE
            - CHANGE
          example: 'CREATE'
        travel_products:
          type: array
          minItems: 1
          maxItems: 20
          items:
            $ref: '#/components/schemas/TravelProduct'
        travelers:
          description: 'Individuals who are part of the travel party for the order. At minimum there must be at least `1` traveler.'
          type: array
          items:
            $ref: '#/components/schemas/Traveler'
          minItems: 1
          maxItems: 30
        payments:
          description: 'List of the form(s) of payment being used to purchase the order.  One or more forms of payment can be used within an order. Information gathered will be specific to the form of payment.'
          type: array
          items:
            $ref: '#/components/schemas/Payment'
          minItems: 1
          maxItems: 30
        credit_card_authentication_failure_count:
          description: 'Total authentication failure count for given credit card. Authentication failures happen when a cardholder enters their card information incorrectly.'
          type: integer
    CustomerAccount:
      required:
        - account_type
        - name
        - email_address
      type: object
      properties:
        user_id:
          description: 'Unique identifier assigned to the account owner by the partner. `user_id` is specific to the partner namespace'
          type: string
        account_type:
          description: |
            Identifies if the customer account is known to the client. Possible values are:

            -`GUEST` - Applicable if the partner maintains record to distinguish whether the transaction was booked via a guest account.

            -`STANDARD` - Default account type.
          type: string
          enum:
            - GUEST
            - STANDARD
          example: STANDARD
        name:
          $ref: '#/components/schemas/Name'
        email_address:
          description: 'Email address for the account owner.'
          type: string
          format: email
        telephones:
          type: array
          items:
            $ref: '#/components/schemas/Telephone'
        address:
          $ref: '#/components/schemas/Address'
        registered_time:
          description: 'The local date and time that the customer first registered on the client site, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
          type: string
          format: date-time
          maxLength: 50
    Traveler:
      type: object
      required:
        - traveler_name
        - primary
      properties:
        traveler_name:
          $ref: '#/components/schemas/Name'
        email_address:
          description: 'Email address associated with the traveler as supplied by the partner system.'
          type: string
          format: email
          maxLength: 200
        telephones:
          type: array
          items:
            $ref: '#/components/schemas/Telephone'
          minItems: 1
          maxItems: 250
        primary:
          description: 'Indicator for one of the travelers who is the primary traveler. One traveler in each itinerary item must be listed as primary. By default, for a single traveler this should be set to `true`.'
          type: boolean
        age:
          description: 'Age of the traveler.'
          type: number
        birth_date:
          description: 'Date of birth for traveler, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
          type: string
          format: date-time
          maxLength: 50
        citizenship_country_code:
          description: 'The alpha-3 ISO country code of the traveler''s nationality.'
          type: string
          pattern: '^[A-Z]{3}$'
          minLength: 3
          maxLength: 3
        traveler_id:
          description: 'A unique identifier for travelers in the transaction.'
          type: string
          maxLength: 100
    Address:
      required:
        - address_line1
        - city
        - state
        - zip_code
        - country_code
      type: object
      properties:
        address_type:
          type: string
          enum:
            - HOME
            - WORK
        address_line1:
          description: 'Address line 1 of the address provided.'
          type: string
          maxLength: 200
        address_line2:
          description: 'Address line 2 of the address provided.'
          type: string
          maxLength: 200
        city:
          description: 'City of the address provided.'
          type: string
          maxLength: 200
        state:
          description: 'The two-characters ISO code for the state or province of the address.'
          type: string
          pattern: ^[A-Z]{2}$
        zip_code:
          description: 'Zip code of the address provided.'
          type: string
          maxLength: 20
        country_code:
          description: 'ISO alpha-3 country code of the address provided.'
          pattern: '^[A-Z]{3}$'
          type: string
    TravelProduct:
      required:
        - price
        - type
        - inventory_type
        - inventory_source
        - travelers_references
      type: object
      discriminator:
        propertyName: 'type'
      properties:
        price:
          $ref: '#/components/schemas/Amount'
        type:
          description: 'Type of product advertised on the website.'
          type: string
          maxLength: 40
        inventory_type:
          description: 'Type of inventory.'
          type: string
          maxLength: 30
        inventory_source:
          description: 'Identifies the business model through which the supply is being sold. Merchant/Agency.'
          type: string
          enum:
            - MERCHANT
            - AGENCY
        travelers_references:
          description: 'List of travelerGuids who are part of the traveling party on the order for the product.'
          type: array
          minItems: 1
          maxItems: 40
          items:
            type: string
            maxLength: 50
    Air:
      allOf:
        - $ref: '#/components/schemas/TravelProduct'
        - type: object
          required:
            - type
            - departure_time
            - arrival_time
            - air_segments
          properties:
            departure_time:
              description: 'Local date and time of departure from original departure location, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
              type: string
              format: date-time
              maxLength: 50
            arrival_time:
              description: 'Local date and time of arrival to final destination location, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
              type: string
              format: date-time
              maxLength: 50
            air_segments:
              description: 'Additional airline and flight details for each of the trip segments.'
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/AirSegment'
              maxItems: 30
            flight_type:
              description: 'Identifies the type of air trip based on the air destinations.'
              type: string
              enum:
                - ROUNDTRIP
                - ONEWAY
                - MULTIPLE_DESTINATION
            passenger_name_record:
              description: 'Airline booking confirmation code for the trip.'
              type: string
              maxLength: 100
            global_distribution_system_type:
              description: 'Associated with Passenger Name Record (PNR).'
              type: string
              maxLength: 100
    AirSegment:
      type: object
      required:
        - airline_code
        - departure_airport_code
        - arrival_airport_code
      properties:
        airline_code:
          description: 'Airline code of the trip segment'
          type: string
          maxLength: 10
        departure_airport_code:
          description: 'Departure airport of the trip segment'
          type: string
          maxLength: 10
        arrival_airport_code:
          description: 'Arrival airport of the trip segment'
          type: string
          maxLength: 10
        departure_time:
          description: 'Local date and time of departure from departure location, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
          type: string
          format: date-time
          maxLength: 50
        arrival_time:
          description: 'Local date and time of arrival to destination location, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
          type: string
          format: date-time
          maxLength: 50
    Cruise:
      allOf:
        - $ref: "#/components/schemas/TravelProduct"
        - type: object
          required:
            - type
            - departure_time
            - arrival_time
            - embarkation_port
            - disembarkation_port
            - ship_name
          properties:
            departure_time:
              description: "Local date and time of departure from original departure location, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`."
              type: string
              format: date-time
              maxLength: 50
            arrival_time:
              description: "Local date and time of arrival from original arrival location, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`."
              type: string
              format: date-time
              maxLength: 50
            embarkation_port:
              description: "Location from where cruise will depart."
              type: string
              maxLength: 200
            disembarkation_port:
              description: "The cruise's final destination."
              type: string
              maxLength: 200
            ship_name:
              description: "Name of the cruise ship."
              type: string
              maxLength: 200
    Car:
      allOf:
        - $ref: '#/components/schemas/TravelProduct'
        - type: object
          required:
            - type
            - pick_up_location
            - drop_off_location
            - pickup_time
            - return_time
          properties:
            pick_up_location:
              description: 'Location where the automobile will be picked up.'
              type: string
              maxLength: 200
            drop_off_location:
              description: 'Location at which the automobile will be returned.'
              type: string
              maxLength: 200
            pickup_time:
              description: 'Local date and time the automobile will be picked-up, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
              type: string
              format: date-time
              maxLength: 50
            return_time:
              description: 'Local date and time the automobile will be returned, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
              type: string
              format: date-time
              maxLength: 50
    Hotel:
      allOf:
        - $ref: '#/components/schemas/TravelProduct'
        - type: object
          required:
            - type
            - hotel_id
            - hotel_name
            - address
            - checkin_time
            - checkout_time
          properties:
            hotel_id:
              description: 'Unique hotel identifier assigned by the partner.'
              type: string
              maxLength: 200
              example: '8883333999221'
            price_withheld:
              description: 'Identifies if the product price was withheld from the customer during the booking process.'
              type: boolean
            hotel_name:
              description: 'Name of the hotel.'
              type: string
              maxLength: 200
              example: 'Hotel Expedia'
            room_count:
              description: 'Total number of rooms booked within the hotel product collection.'
              type: integer
              format: int32
            address:
              $ref: '#/components/schemas/Address'
            checkin_time:
              description: 'Local date and time of the hotel check-in, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
              type: string
              format: date-time
              maxLength: 50
            checkout_time:
              description: 'Local date and time of the hotel check-out, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
              type: string
              format: date-time
              maxLength: 50
    Payment:
      type: object
      required:
        - brand
        - method
        - billing_name
      discriminator:
        propertyName: 'method'
        mapping:
          CREDIT_CARD: '#/components/schemas/CreditCard'
          PAYPAL: '#/components/schemas/PayPal'
          POINTS: '#/components/schemas/Points'
      properties:
        brand:
          description: 'Payment brand used for payment on this transaction.'
          type: string
          maxLength: 200
        method:
          $ref: '#/components/schemas/PaymentMethod'
        reason:
          $ref: '#/components/schemas/PaymentReason'
        billing_name:
          $ref: '#/components/schemas/Name'
        billing_address:
          $ref: '#/components/schemas/Address'
        billing_email_address:
          description: 'Email address associated with the payment.'
          type: string
          format: email
          maxLength: 200
        authorized_amount:
          $ref: '#/components/schemas/Amount'
        verified_amount:
          $ref: '#/components/schemas/Amount'
        three_digits_secure_criteria:
          $ref: '#/components/schemas/PaymentThreeDSCriteria'
        operations:
          $ref: '#/components/schemas/Operations'
        total_refund_amount:
          description: 'Total amount refunded towards the transaction.'
          type: number
          format: double
    PaymentThreeDSCriteria:
      description: 'Payment 3DS criteria attributes.'
      type: object
      properties:
        probable_flag:
          description: 'This is a flag passed that indicates that this transaction could potentially go through 3DS.'
          type: boolean
        transaction_model:
          description: 'Model used to process payment transaction.'
          type: string
          maxLength: 200
    Operations:
      description: |
        All operations related to a payment throughout its lifespan. An operation represents an event external to Fraud Prevention Service that specifies to perform a payment operation. Possible operation types include:

        - `Verify`

        - `Authorize`

        - `AuthorizeReversal`

        - `Capture`

        - `Refund`
      type: object
      properties:
        verify:
          $ref: '#/components/schemas/Verify'
        authorize:
          $ref: '#/components/schemas/Authorize'
        authorize_reversal:
          $ref: '#/components/schemas/AuthorizeReversal'
        capture:
          $ref: '#/components/schemas/Capture'
        refunds:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
          maxItems: 20
    Verify:
      description: 'A verify operation represents the intent to verify the payment associated with this transaction.'
      allOf:
        - $ref: '#/components/schemas/PaymentOperation'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/VerificationType'
    PaymentReason:
      description: |
        The reason of payment. Possible values:
        - `FULL` - If the amount is paid i full for the order
        - `DEPOSIT` - The initial payment. Amount to be paid up front.
        - `SCHEDULED` - The amount to be payment based on a schedule for the remaining portion of the booking amount.
        - `SUBSEQUENT` - An additional amount paid that was not originally scheduled.
        - `DEFERRED`
      type: string
      enum:
        - FULL
        - DEPOSIT
        - SCHEDULED
        - SUBSEQUENT
        - DEFERRED
    VerificationType:
      description: 'The type of the verification used to verify the instrument. If the Card Verfication Value was provided to verify the credit card used for the transaction, `type = CVV`.'
      type: string
      enum:
        - CVV
        - 3DS
    Authorize:
      description: 'Authorize operation on the payment. An authorize operation represents placing the funds on hold with the specified form of payment.'
      allOf:
        - $ref: '#/components/schemas/PaymentOperation'
        - type: object
    AuthorizeReversal:
      description: 'Authorize Reversal operation on the payment. An authorize reversal operation represents a notification received usually from a 3rd party payment processor to indicate that an authorization hold should be released as a result of a sale being partially or completely cancelled.'
      allOf:
        - $ref: '#/components/schemas/PaymentOperation'
        - type: object
    Capture:
      description: 'Capture operation on the payment. A capture operation represents a notification received usually from a 3rd party payment processor to indicate that the funds placed on hold will be captured and the funds transfer process will occur from the customer''s funds to the merchant''s funds.'
      allOf:
        - $ref: '#/components/schemas/PaymentOperation'
        - type: object
    Refund:
      description: 'Refund operation on the payment. A refund operation represents the intent to refund a previous charge.'
      allOf:
        - $ref: '#/components/schemas/PaymentOperation'
        - type: object
    PaymentOperation:
      type: object
      properties:
        id:
          type: string
          maxLength: 200
        amount:
          $ref: '#/components/schemas/Amount'
        outcome:
          $ref: '#/components/schemas/PaymentOutcome'
    PaymentOutcome:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PaymentStatus'
        code:
          description: 'A mnemonic code for the payment processing.'
          type: string
          maxLength: 200
        description:
          description: 'A short description providing additional explanation regarding the mnemonic code.'
          type: string
          maxLength: 200
    PaymentStatus:
      description: 'The status of the payment operation.'
      type: string
      enum:
        - COMPLETED
        - FAILED
    PaymentMethod:
      description: 'The payment method used at the time of purchase for the transaction. Supported `method`''s are: `CREDIT_CARD`, `PAYPAL`, `POINTS`.'
      type: string
      enum:
        - CREDIT_CARD
        - PAYPAL
        - POINTS
    Insurance:
      allOf:
        - $ref: '#/components/schemas/TravelProduct'
        - type: object
          required:
            - type
    CreditCard:
      allOf:
        - $ref: '#/components/schemas/Payment'
        - type: object
          required:
            - method
            - card_type
            - card_number
            - card_avs_response
            - card_cvv_response
            - telephones
          properties:
            card_type:
              description: 'Type of card used for payment, (eg. `CREDIT`, `DEBIT`).'
              type: string
              maxLength: 200
            card_number:
              description: 'All the digits (unencrypted) of the credit card number associated with the payment.'
              type: string
              maxLength: 200
            expiry_date:
              description: 'Expiration date of the credit card used for payment.'
              type: string
              format: date-time
              maxLength: 50
            electronic_commerce_indicator:
              description: 'Electronic Commerce Indicator, a two or three digit number usually returned by a 3rd party payment processor in regards to the authentication used when gathering the cardholder''s payment credentials.'
              type: string
              maxLength: 200
            virtual_credit_card_flag:
              description: 'A flag to indicate that the bank card being used for the charge is a virtual credit card.'
              type: boolean
            wallet_type:
              description: 'If a virtual/digital form of payment was used, the type of digital wallet should be specified here. Possible `wallet_type`''s include: `Google` or `ApplePay`.'
              type: string
              maxLength: 200
            card_avs_response:
              type: string
              maxLength: 50
              description: 'A field used to confirm if the address provided at the time of purchase matches what the bank has on file for the Credit Card.'
            card_cvv_response:
              type: string
              maxLength: 20
              description: 'A field used to confirm the Card Verification Value on the Credit Card matches the Credit Card used at the time of purchase.'
            telephones:
              description: 'Telephone(s) associated with card holder and credit card.'
              type: array
              minItems: 1
              maxItems: 20
              items:
                $ref: '#/components/schemas/Telephone'
            merchant_order_code:
              description: "Reference code passed to acquiring bank at the time of payment. This code is the key ID that ties back to payments data at the payment level."
              type: string
              maxLength: 200
    PayPal:
      allOf:
        - $ref: '#/components/schemas/Payment'
        - type: object
          required:
            - method
            - payer_id
            - transaction_id
          properties:
            payer_id:
              description: 'Unique PayPal Customer Account identification number.'
              type: string
              maxLength: 200
            transaction_id:
              description: 'Unique transaction number to identify Auth calls at PayPal.'
              type: string
              maxLength: 200
            merchant_order_code:
              description: "Reference code passed to acquiring bank at the time of payment. This code is the key ID that ties back to payments data at the payment level."
              type: string
              maxLength: 200
    Points:
      allOf:
        - $ref: '#/components/schemas/Payment'
        - type: object
          required:
            - method
    Name:
      description: "Group of attributes intended to hold information about a customer or traveler's name for the order."
      type: object
      required:
        - first_name
        - last_name
      properties:
        last_name:
          description: 'Surname, or last name, of the person.'
          type: string
          maxLength: 200
        first_name:
          description: 'Given, or first name, of the person.'
          type: string
          maxLength: 200
        middle_name:
          description: 'Middle name of the person.'
          type: string
          maxLength: 200
        title:
          description: 'Title of the person for name (e.g. Mr., Ms. etc).'
          type: string
          maxLength: 200
        suffix:
          description: 'Generational designations (e.g. Sr, Jr, III) or values that indicate the individual holds a position, educational degree, accreditation, office, or honor (e.g. PhD, CCNA, OBE).'
          type: string
          maxLength: 50
        full_name:
          description: 'Full name of the person that includes title, first_name, middle_name, last_name, suffix.'
          type: string
          maxLength: 500
          example: 'Sally Expedia'
    Telephone:
      description: 'Group of attributes intended to hold information about phone number associated with the transaction.  A user can have one to many phone numbers (home, work, mobile, etc.).'
      type: object
      required:
        - country_access_code
        - area_code
        - phone_number
      properties:
        type:
          $ref: '#/components/schemas/TelephoneType'
        platform_type:
          $ref: '#/components/schemas/TelephonePlatformType'
        country_access_code:
          description: 'Numeric digit between 1 to 3 characters used to represent the country code for international dialing.  Does not include symbols, spaces, or leading zeros.'
          type: string
          pattern: ^[0-9]{1,3}$
          maxLength: 3
          example: '1'
        area_code:
          description: 'A number prefixed to an individual telephone number: used in making long-distance calls.  Does not include symbols, spaces, or leading zeros.'
          type: string
          pattern: ^[0-9]{1,20}$
          maxLength: 20
          example: '1'
        phone_number:
          description: 'A number that is dialed on a telephone, without the country or area codes, to reach a particular person, business, etc.  Does not include symbols, spaces, or leading zeros.'
          type: string
          pattern: ^[0-9]{1,50}$
          maxLength: 50
          example: '1234567'
        full_phone_number:
          description: 'The concatenated countryAccessCode, areaCode, and phoneNumber with leading zeros from the original fields and symbols  (-,.+) removed.  It does not include a phone extension.'
          type: string
          pattern: ^[0-9]{1,100}$
          maxLength: 100
          example: '12345689'
        extension_number:
          description: 'The number used to reach an individual once a phone connection is established.  Does not include symbols, spaces, or leading zeros.'
          type: string
          pattern: ^[0-9]{1,20}$
          maxLength: 20
          example: '89'
        preference_rank:
          description: 'Ranking of order of user preference for contact via text (if type is Mobile) or voice.  `0` means no preference.  `1` is the primary phone, `2` is the secondary phone, etc.'
          type: number
        last_verified_timestamp:
          description: 'Local date and time user validated possession of their phone number via a text or voice multi factor authentication challenge, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.'
          type: string
          format: date-time
          maxLength: 50
        verified_flag:
          description: 'Flag indicating whether user passed validation of possession of their phone number via a text or voice multi factor authentication challenge.'
          type: boolean
    TelephoneType:
      description: 'Classification of the phone (e.g. `Home`, `Mobile`). '
      type: string
      enum:
        - HOME
        - MOBILE
        - BUSINESS
        - FAX
        - OTHER
    TelephonePlatformType:
      description: 'Classification of the phone platform.'
      type: string
      enum:
        - MOBILE
        - LANDLINE
        - VOIP
    Email:
      description: 'Group of attributes intended to hold information about email address associated with the transaction.'
      type: object
      properties:
        email_address:
          description: 'Full email address including the alias, @ symbol, domain, and root domain.'
          type: string
          format: email
          maxLength: 200
    Amount:
      type: object
      required:
        - value
        - currency_code
      properties:
        value:
          description: 'The amount required in payment for the product/order in local currency.'
          type: number
          format: double
        currency_code:
          description: 'The ISO  alpha-3 country code for the amount currency.'
          type: string
          pattern: ^[A-Z]{3}$
          maxLength: 3
  securitySchemes:
    orderPurchaseScreenAuth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /identity/oauth2/v3/token?grant_type=client_credentials
          scopes:
            fraudandrisk.stub.order-purchase-screen: Use Fraud Systems for screening orders
    orderPurchaseUpdateAuth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /identity/oauth2/v3/token?grant_type=client_credentials
          scopes:
            fraudandrisk.stub.order-purchase-update: Use Fraud Systems for updating orders

  responses:
    BadRequest:
      description: "The client violated the contract while invoking the API. One or more required fields are missing, or one or more fields have malformed value or incorrect types."
      headers:
        Date:
          description: The date the error ocurred
          schema:
            type: string
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ExtendedError'
          example:
            type: https://apis.expediagroup.com/errors/common/invalid-argument
            detail: An input validation error was encountered. Please see causes for more details.
            causes:
              - type: https://apis.expediagroup.com/errors/common/missing-required-value
                detail: The value of a field should not be null
                location: BODY
                name: $.transaction.site_info.source_system_name
              - type: https://apis.expediagroup.com/errors/common/invalid-value
                detail: The value of a field should not be null
                location: BODY
                name: $.transaction.site_info.country_code
    AuthenticationRequired:
      description: "The request cannot be fulfilled because the client is not correctly authenticated (i.e. the access token is missing, invalid, or expired)."
      headers:
        Date:
          description: The date the error ocurred
          schema:
            type: string
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: https://apis.expediagroup.com/errors/common/unauthenticated
            detail: Invalid  EG Token provided. Please provide valid Token in the Authorization header.
    Unauthorized:
      description: "The authenticated client is not authorized to perform this action."
      headers:
        Date:
          description: The date the error ocurred
          schema:
            type: string
      content:
        'application/json':
          schema:
            $ref: "#/components/schemas/Error"
          example:
            type: https://apis.expediagroup.com/errors/common/permission-denied
            detail: The account used to make the API request is not allowed this API operation. Please request access by contacting the account manager.
    NotFound:
      description: "The requested resource URL does not map to any API operation."
      headers:
        Date:
          description: The date the error ocurred
          schema:
            type: string
      content:
        'application/json':
          schema:
            $ref: "#/components/schemas/Error"
          example:
            type: https://apis.expediagroup.com/errors/common/resource-not-found
            detail: The requested resource URL '/v2/order/purchase/screen' does not map to any API operation. Please check the URL is valid and maps to an API operation.
    MethodNotAllowed:
      description: "The specified method (Ex: GET, PUT, DELETE, etc.) is not allowed on this resource."
      headers:
        Date:
          description: The date the error ocurred
          schema:
            type: string
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: https://apis.expediagroup.com/errors/common/operation-not-supported
            detail: The request failed because the requested API operation is not allowed on this resource.
    NotAcceptable:
      description: "The specified Accept header (Ex: application/xml) is not supported for this resource."
      headers:
        Date:
          description: The date the error ocurred
          schema:
            type: string
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: https://apis.expediagroup.com/errors/common/request-not-acceptable
            detail: The request failed because the specified Accept header is not supported for this resource.
    TooManyRequests:
      description: "Too many requests allowed for this client for this resource."
      headers:
        Date:
          description: The date the error ocurred
          schema:
            type: string
      content:
        'application/json':
          schema:
            $ref: "#/components/schemas/Error"
          example:
            type: https://apis.expediagroup.com/errors/common/resource-exhausted
            detail: The request failed because the server resources for this client have been exhausted.
    InternalServerError:
      description: "A server-side error occurred while processing the request."
      headers:
        Date:
          description: The date the error ocurred
          schema:
            type: string
      content:
        'application/json':
          schema:
            $ref: "#/components/schemas/Error"
          example:
            type: https://apis.expediagroup.com/errors/common/internal
            detail: An internal system error occurred while processing the request.

  parameters:
    contentType:
      name: 'content-type'
      in: 'header'
      schema:
        type: string
        enum: ['application/json']
      required: true
