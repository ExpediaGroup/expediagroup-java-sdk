name: Generate & Publish Test SDK Snapshot
on:
  workflow_call:
    inputs:
      version:
        description: 'SDK version to generate test jar for'
        required: true
        type: string
      namespace:
        description: 'SDK to generate test jar for'
        required: true
        type: string
      endpoint_prefix:
        description: 'Endpoint to prepend specs paths with'
        required: true
        type: string
    outputs:
      artifactId:
        value: ${{ jobs.sdk-metadata.outputs.artifactId }}
      groupId:
        value: ${{ jobs.sdk-metadata.outputs.groupId }}
      version:
        value: ${{ jobs.sdk-metadata.outputs.version }}

jobs:
  download-specs:
    uses: ./.github/workflows/generator-download-specs.yaml
    with:
      url: ${{ inputs.specs_url }}
  transform-specs:
    needs: [ download-specs ]
    uses: ./.github/workflows/generator-transform-specs.yaml
    with:
      configurations: -th -te ${{ inputs.endpoint_prefix }} --operationIdsToTags
  generate-sdk:
    needs: [ transform-specs ]
    uses: ./.github/workflows/generator-generate.yaml
    with:
      name: ${{ inputs.namespace }}
      version: ${{ inputs.version }}
  sdk-metadata:
    runs-on: ubuntu-latest
    needs: [ generate-sdk ]
    outputs:
      artifactId: ${{ steps.parse-metadata.outputs.artifactId }}
      groupId: ${{ steps.parse-metadata.outputs.groupId }}
      version: ${{ steps.parse-metadata.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: jar
          path: jar
      - run: ls -R .
      - id: parse-metadata
        working-directory: jar
        shell: python -u {0}
        run: |
          import os

          metadata: dict = dict()
          with open("pom.properties") as properties:
            metadata = dict(metadata = dict(line.strip().split('=') for line in filter(bool, file.readlines())))

          with open(os.getenv("GITHUB_OUTPUT"), "a") as GITHUB_OUTPUT:
            for key, value in metadata.items():
              print(f"{key}={value}", file=GITHUB_OUTPUT)
