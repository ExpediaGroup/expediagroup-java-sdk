name: Run Tests
on:
  workflow_dispatch:
    inputs:
      source:
        description: 'Source of tests'
        required: true
        type: choice
        options:
          - 'specs'
          - 'sdk'
        default: 'sdk'
      specs_url:
        description: 'Run tests based on specs'
        required: false
        type: string
        default: ''
      sdk_version:
        description: 'Run tests based on SDK'
        required: false
        type: string
        default: 'LATEST'
      sdk_namespace:
        description: 'SDK to test'
        required: true
        type: string
        default: 'rapid'
      endpoint_prefix:
        description: 'Endpoint to prepend specs paths with'
        required: true
        type: string
      jdk:
        description: 'JDK version to use'
        required: true
        type: choice
        options:
          - '21'
          - '17'
          - '11'
          - '8'
        default: '21'
  workflow_call:
    inputs:
      source:
        description: 'Source of tests'
        required: true
        type: string
        default: 'sdk'
      sdk_version:
        description: 'Run tests based on SDK'
        required: false
        type: string
        default: 'LATEST'
      jdk:
        description: 'JDK version to use'
        required: true
        type: string
        default: '21'
      product:
        description: 'Endpoint to prepend specs paths with'
        required: true
        type: string

jobs:
  read-config:
    runs-on: ubuntu-latest
    outputs:
      namespace: ${{ steps.read-config.outputs.namespace }}
      endpoint-prefix: ${{ steps.read-config.outputs.endpoint_prefix }}
      specs_url: ${{ steps.read-config.outputs.specs_url }}
      repository: ${{ steps.read-config.outputs.repository }}
    steps:
      - uses: actions/checkout@v4
      - name: "Read Product Config"
        id: read-config
        shell: python -u {0}
        run: |
          import json, os

          product: dict
          with open('.github/resources/products.json') as products:
            product = json.load(f).get("${{ inputs.product }}")

          if not product:
            print("::error::Invalid product: ${{ inputs.product }}")
            exit(1)

          if 'sdk' in '${{ inputs.source }}' and not('${{ inputs.sdk_version }}'):
            print('::error::Invalid SDK version: ${{ inputs.sdk_version }}')
            exit(1)

          with open(os.getenv("GITHUB_OUTPUT"), "a+") as OUTPUT:
            for key, value in product.items():
              print(f"{key}={value}", file=OUTPUT)

  generate-test-sdk:
    if: inputs.source == 'specs'
    needs: [ read-config ]
    uses: ./.github/workflows/generator-test-sdk.yaml
    with:
      version: ${{ inputs.sdk_version }}
      namespace: ${{ needs.read-config.outputs.namespace }}
      endpoint_prefix: ${{ needs.read-config.outputs.endpoint_prefix }}
      specs_url: ${{ needs.read-config.outputs.specs_url }}
    secrets: inherit
  run-rapid-examples:
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && inputs.product == 'rapid'
    needs: [ read-config, generate-test-sdk ]
    uses: "ExpediaGroup/rapid-java-sdk/.github/workflows/run-examples.yaml@main"
    with:
      sdk_version: ${{ needs.generate-test-sdk.outputs.version }}
      jdk: ${{ inputs.jdk }}
      sdk_generation_workflow_run_id: ${{ github.run_id }}
    secrets:
      KEY: ${{ secrets.RAPID_KEY }}
      SECRET: ${{ secrets.RAPID_SECRET }}
  run-contract-tests:
    uses: ./.github/workflows/run-contract-tests.yaml
    with:
      jdk: ${{ inputs.jdk }}
    secrets: inherit
