name: PR Check Tests Run
on:
  workflow_call:
    inputs:
      repository:
        description: 'Repository to checkout'
        type: string
        required: true
      ref:
        description: 'Branch or tag to checkout'
        type: string
        required: true
      specs_path:
        description: 'Path of the artifact to persist to'
        type: string
        default: ''

jobs:
  upload-specs:
    uses: ./.github/workflows/selfserve-checkout-and-upload.yaml
    with:
      repository: ${{ inputs.repository }}
      ref: "${{ github.head_ref || github.ref_name }}"
      artifact_key: 'specs'
      artifact_path: ${{ inputs.specs_path }}
  mock:
    needs: [ upload-specs ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: specs
          path: specs
      - name: Download Latest Specmatic Executable
        working-directory: specs
        run: |
          curl -s https://api.github.com/repos/znsio/specmatic/releases/latest \
          | grep "browser_download_url.*specmatic.jar" \
          | cut -d : -f 2,3 \
          | tr -d \" \
          | xargs curl -L -o specmatic.jar
      - uses: actions/setup-node@v4
        with:
          node-version: 18.18.2
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
      - name: Parse Specs
        working-directory: specs
        run: |
          spec=$(find . -maxdepth 1 -type f \( -name "*.yaml" -o -name "*.yml" \) | head -n 1)

          if [ ! -f $spec ]; then
            echo "Specs not found!"
          fi

          echo "spec=$spec" >> $GITHUB_ENV
      - name: Transform Specs
        working-directory: specs
        run: npx --yes -p @expediagroup/spec-transformer cli -i ${{ env.spec }} -o ${{ env.spec }} -to
      - name: Run Mock Server
        working-directory: specs
        run: java -jar specmatic.jar stub ${{ env.spec }} --port 8080 & disown
      - name: Wait for Mock Server to Start
        run: sleep 10
      - name: Verify Server is Running
        run: |
          status=$(curl --write-out '%{http_code}' --silent --output /dev/null http://localhost:8080/$(uuidgen))
          if [ $status -e 000 ]; then
              echo "Server not running!"
              exit 1
          fi

