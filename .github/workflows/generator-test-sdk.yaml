name: Generate Test SDK
on:
  workflow_call:
    inputs:
      version:
        description: 'SDK version to generate test jar for'
        required: true
        type: string
      namespace:
        description: 'SDK to generate test jar for'
        required: true
        type: string
      endpoint_prefix:
        description: 'Endpoint to prepend specs paths with'
        required: true
        type: string
      specs_url:
        description: 'Run tests based on specs'
        required: true
        type: string
      jdk:
        description: 'JDK version to use'
        required: false
        type: string
        default: '21'
    outputs:
      artifactId:
        value: ${{ jobs.sdk-metadata.outputs.artifactId }}
      groupId:
        value: ${{ jobs.sdk-metadata.outputs.groupId }}
      version:
        value: ${{ jobs.sdk-metadata.outputs.version }}

jobs:
  download-specs:
    uses: ./.github/workflows/generator-download-specs.yaml
    with:
      url: ${{ inputs.specs_url }}
  transform-specs:
    needs: [ download-specs ]
    uses: ./.github/workflows/selfserve-transform-specs.yaml
    with:
      specs_key: 'raw-specs'
      transformations: -th -te ${{ inputs.endpoint_prefix }} --operationIdsToTags
      transformed_specs_key: "tspecs-${{ inputs.namespace }}-${{ inputs.version }}-${{ inputs.jdk }}"
  generate-sdk:
    needs: [ transform-specs ]
    uses: ./.github/workflows/selfserve-generate.yaml
    with:
      name: ${{ inputs.namespace }}
      version: ${{ inputs.version }}
      templates: 'sdk-repo/generator/openapi/src/main/resources/templates/expediagroup-sdk'
      specs_key: "tspecs-${{ inputs.namespace }}-${{ inputs.version }}-${{ inputs.jdk }}"
      sdk_key: "sdk-${{ inputs.namespace }}-${{ inputs.version }}-${{ inputs.jdk }}"
  sdk-metadata:
    runs-on: ubuntu-latest
    needs: [ generate-sdk ]
    outputs:
      artifactId: ${{ steps.parse-metadata.outputs.artifactId }}
      groupId: ${{ steps.parse-metadata.outputs.groupId }}
      version: ${{ steps.parse-metadata.outputs.version }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: jar
          path: jar
      - id: parse-metadata
        working-directory: jar/maven-archiver
        shell: python -u {0}
        run: |
          import os

          metadata: dict = dict()
          with open("pom.properties") as properties:
            metadata = dict(line.strip().split('=') for line in filter(bool, properties.readlines()))

          with open(os.getenv("GITHUB_OUTPUT"), "a") as GITHUB_OUTPUT:
            for key, value in metadata.items():
              print(f"{key}={value}", file=GITHUB_OUTPUT)
