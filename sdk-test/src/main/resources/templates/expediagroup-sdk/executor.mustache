package com.expediagroup.sdk.{{{namespace}}}.test;

import com.expediagroup.sdk.core.model.Operation
import com.expediagroup.sdk.core.model.Response
import com.expediagroup.sdk.core.model.exception.service.ExpediaGroupServiceException
import com.expediagroup.sdk.{{{namespace}}}.client.*
import com.expediagroup.sdk.{{{namespace}}}.operations.*
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.node.ObjectNode
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper

class {{{clientClassname}}}Executor {
    companion object {
        val mapper = jacksonObjectMapper()
    }

    private val client = {{{clientClassname}}}Client.builder()
        .key(System.getProperty("sdk.key", "API_KEY"))
        .secret(System.getProperty("sdk.secret", "API_SECRET"))
        .endpoint("localhost:8080")
        .requestTimeout(10000)
        .build()

    fun execute(request: ObjectNode, expectedResponse: ObjectNode) {
        val key = "${request["method"].asText().trim()}: ${request["path"].asText().trim()}"

        val requestType: Class<*> = metadata[key]!!.requestType

        val operation = mapper.readValue(request.toPrettyString(), requestType) as Operation<*>

        if (expectedResponse["status"].asInt() in 200..299) {
            val actual = mapper.convertValue(execute(operation), JsonNode::class.java)
            assert ((expectedResponse["body"] as JsonNode).equals(actual)) // TODO: Add a better way to compare responses
        } else {
            try {
                val actual = execute(operation)
                throw Exception("Response expected to be okay but was not! \n${actual.toString()}")
            } catch (e: ExpediaGroupServiceException) {
                // expected
            }
        }
    }

    private fun execute(operation: Operation<*>): Response<*> =
        when (operation) {
        {{#apiInfo}}
            {{#apis}}
                {{#operations}}
                    {{#operation}}
            is {{{operationIdCamelCase}}}Operation -> {
            client.execute(operation as {{{operationIdCamelCase}}}Operation)
            }
                    {{/operation}}
                {{/operations}}
            {{/apis}}
        {{/apiInfo}}
            else -> throw Exception("Operation not found")
        }
}