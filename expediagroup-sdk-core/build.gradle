import kotlinx.kover.gradle.plugin.dsl.AggregationType
import kotlinx.kover.gradle.plugin.dsl.CoverageUnit

plugins {
    id 'org.jetbrains.kotlin.jvm'

    /* Test Reporting */
    id 'org.jetbrains.kotlinx.kover' version "0.9.1"

    /* Linting */
    id "org.jlleitschuh.gradle.ktlint" version "12.1.2"
}

kotlin {
    jvmToolchain(8)
}

dependencies {
    /* Kotlin */
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.1.10'

    /* EG SDK Core */
    api 'com.squareup.okio:okio:3.10.2'
    implementation 'com.ebay.ejmask:ejmask-api:1.3.0'
    implementation 'com.ebay.ejmask:ejmask-extensions:1.3.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.18.2'
    implementation 'org.slf4j:slf4j-api:2.0.16'

    /* Testing */
    testImplementation platform('org.junit:junit-bom:5.11.4')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'io.mockk:mockk:1.13.16'
    testImplementation "com.squareup.okhttp3:mockwebserver:4.12.0"
}

ktlint {
    debug = true
    version = "1.5.0"
    verbose = true

    additionalEditorconfig = [
            "max_line_length"     : "200",
            "indent_style"        : "space",
            "indent_size"         : "4",
            "insert_final_newline": "true",
            "end_of_line"         : "lf",
    ]
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    classpath = classpath.filter {
        // exclude original sdk.properties file during testing
        !it.absolutePath.contains("build/resources/main/sdk.properties")
    }
}

tasks.named("check") {
    finalizedBy("koverHtmlReport")
}

kover {
    reports {
        filters {
            excludes {
                packages(
                        "com.expediagroup.sdk.core.exception"
                )
            }
        }
        total {
            verify {
                rule {
                    bound {
                        aggregationForGroup = AggregationType.COVERED_PERCENTAGE
                        coverageUnits = CoverageUnit.LINE
                        minValue = 100
                    }
                    bound {
                        aggregationForGroup = AggregationType.COVERED_PERCENTAGE
                        coverageUnits = CoverageUnit.BRANCH
                        minValue = 100
                    }
                }
            }
        }
    }
}
