import kotlinx.kover.gradle.plugin.dsl.AggregationType
import kotlinx.kover.gradle.plugin.dsl.CoverageUnit

plugins {
    id 'maven-publish'
    id 'signing'
}

version = project.property("VERSION")
group = project.property("GROUP_ID")

//apply from: "$rootDir/gradle-tasks/publish.gradle"
//apply from: "$rootDir/gradle-tasks/signing.gradle"

dependencies {
    /* Kotlin */
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.1.10'

    /* EG SDK Core */
    api 'com.squareup.okio:okio:3.10.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.18.2'
    implementation 'org.slf4j:slf4j-api:2.0.16'

    /* Testing */
    testImplementation platform('org.junit:junit-bom:5.11.4')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'io.mockk:mockk:1.13.16'
    testImplementation "com.squareup.okhttp3:mockwebserver:4.12.0"
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    classpath = classpath.filter {
        // exclude original sdk.properties file during testing
        !it.absolutePath.contains("build/resources/main/sdk.properties")
    }
}

tasks.named("check") {
    finalizedBy("koverHtmlReport")
}

kover {
    reports {
        filters {
            excludes {
                packages(
                    "com.expediagroup.sdk.core.exception"
                )
            }
        }
        total {
            verify {
                rule {
                    bound {
                        aggregationForGroup = AggregationType.COVERED_PERCENTAGE
                        coverageUnits = CoverageUnit.LINE
                        minValue = 100
                    }
                    bound {
                        aggregationForGroup = AggregationType.COVERED_PERCENTAGE
                        coverageUnits = CoverageUnit.BRANCH
                        minValue = 100
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.property("ARTIFACT_NAME")
            groupId = project.property("GROUP_ID")
            version = project.findProperty("SNAPSHOT_VERSION") ? project.findProperty("SNAPSHOT_VERSION") : project.property("VERSION")
            description = findProperty("DESCRIPTION")

            pom {
                name = project.property("ARTIFACT_NAME")
                description = findProperty("DESCRIPTION")
                url = project.property("POM_URL")

                licenses {
                    license {
                        name = project.property("LICENSE_NAME")
                        url = project.property("LICENSE_URL")
                        distribution = project.property("LICENSE_DISTRIBUTION")
                        comments = project.property("LICENSE_COMMENTS")
                    }
                }

                developers {
                    developer {
                        name = project.property("DEVELOPER_NAME")
                        organization = project.property("DEVELOPER_ORG")
                        organizationUrl = project.property("DEVELOPER_ORG_URL")
                    }
                }

                scm {
                    url = project.property("POM_SCM_URL")
                    connection = project.property("POM_SCM_CONNECTION")
                    developerConnection = project.property("POM_SCM_DEVELOPER_CONNECTION")
                }
            }
        }
    }
}

signing {
    def signingKey = System.getenv("GPG_SECRET")
    def signingPassword = System.getenv("GPG_PASSPHRASE")

    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

