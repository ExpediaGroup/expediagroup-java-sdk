import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
//    id 'signing'
}

version = project.property("VERSION")
group = project.property("GROUP_ID")

apply from: "$rootDir/gradle-tasks/publish-gradle-plugin.gradle"
//apply from: "$rootDir/gradle-tasks/signing.gradle"

dependencies {
    api 'org.openapitools:openapi-generator:7.11.0'
}

kotlin {
    jvmToolchain(11)
}

java {
    withSourcesJar()
    withJavadocJar()
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}


tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = '11'
    }
}

gradlePlugin {
    website = 'https://github.com/ExpediaGroup/expediagroup-java-sdk'
    vcsUrl = 'https://github.com/ExpediaGroup/expediagroup-java-sdk'
    plugins {
        create("egSdkGenerator") {
            id = "com.expediagroup.sdk.openapigenerator"
            implementationClass = "com.expediagroup.sdk.openapigenerator.EgSdkGeneratorPlugin"
            displayName = "EG SDK OpenApi Gradle Plugin Wrapper"
            description = "applies the standard OpenAPI Generator plugin (\"org.openapi.generator\") and configures it with Expedia Group SDK defaults."
            tags = ["expediagroup", "expedia", "sdk", "plugin", "openapi", "generator"]
        }
    }
}

/*
*  Customize the plugin's marker publication POM file with the needed information
*  to match Maven Central requirements.
*/
tasks {
    publishing {
        afterEvaluate {
            publications {
                egSdkOpenApiGeneratorPluginMarkerMaven(MavenPublication) {
                    pom {
                        description = findProperty("DESCRIPTION")
                        url = project.property("POM_URL")

                        licenses {
                            license {
                                name = project.property("LICENSE_NAME")
                                url = project.property("LICENSE_URL")
                                distribution = project.property("LICENSE_DISTRIBUTION")
                                comments = project.property("LICENSE_COMMENTS")
                            }
                        }

                        developers {
                            developer {
                                name = project.property("DEVELOPER_NAME")
                                organization = project.property("DEVELOPER_ORG")
                                organizationUrl = project.property("DEVELOPER_ORG_URL")
                            }
                        }

                        scm {
                            url = project.property("POM_SCM_URL")
                            connection = project.property("POM_SCM_CONNECTION")
                            developerConnection = project.property("POM_SCM_DEVELOPER_CONNECTION")
                        }
                    }
                }
            }
        }
    }
}
