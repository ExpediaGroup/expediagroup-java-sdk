{{#imports}}
import {{import}}
{{/imports}}
import {{packageName}}.validation.PropertyConstraintsValidator.validateConstraints
import {{packageName}}.models.exception.*

import com.expediagroup.sdk.core.client.{{>client/clientBase}}
import com.expediagroup.sdk.core.configuration.{{>client/clientConfiguration}}
import com.expediagroup.sdk.core.model.exception.ExpediaGroupException
import com.expediagroup.sdk.core.model.exception.service.ExpediaGroupServiceException
import com.expediagroup.sdk.core.model.EmptyResponse
import com.expediagroup.sdk.core.model.Nothing
import com.expediagroup.sdk.core.model.Properties
import com.expediagroup.sdk.core.model.Response

import io.ktor.client.call.body
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.request
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.client.statement.HttpResponse
import io.ktor.http.HttpMethod
import io.ktor.http.contentType
import io.ktor.http.ContentType
import io.ktor.http.ParametersBuilder
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.future.future
import java.util.UUID

/**
* {{{description}}}
*/
{{#operations}}
 class {{classname}} private constructor(clientConfiguration: {{>client/clientConfiguration}}) : {{>client/clientBase}}(clientConfiguration){
    private val properties = Properties.from(javaClass.classLoader.getResource("sdk.properties")!!)
    private val javaVersion = System.getProperty("java.version")
    private val operatingSystemName = System.getProperty("os.name")
    private val operatingSystemVersion = System.getProperty("os.version")
    private val userAgent = "expediagroup-sdk-{{#isKotlin}}kotlin{{/isKotlin}}{{^isKotlin}}java{{/isKotlin}}-{{namespace}}/${properties["sdk-version"]!!} (Java $javaVersion; $operatingSystemName $operatingSystemVersion)"

    class Builder : {{>client/clientBase}}.Builder<Builder>() {
        override fun build(): {{classname}} = {{classname}}(
            {{>client/clientConfiguration}}(key, secret, endpoint, requestTimeout, maskedLoggingHeaders, maskedLoggingBodyFields {{>client/authEndpoint}})
        )
    }

    companion object {
        @JvmStatic fun builder() = Builder()
    }

    private fun HttpRequestBuilder.appendHeaders(transactionId: UUID) {
        headers.append("x-sdk-title", properties["sdk-title"]!!)
        headers.append("transaction-id", transactionId.toString())
        headers.append("User-agent", userAgent)
    }

    override suspend fun throwServiceException(response: HttpResponse, operationId: String) {
        throw ErrorObjectMapper.process(response, operationId)
    }

{{#operation}}
    {{^isKotlin}}private {{/isKotlin}}suspend {{^isKotlin}}inline {{/isKotlin}}fun {{^isKotlin}}k{{/isKotlin}}{{operationId}}({{>client/apiParamsDecleration}}): {{{returnType}}}{{^returnType}}Nothing{{/returnType}} {
        return {{^isKotlin}}k{{/isKotlin}}{{operationId}}WithResponse({{>client/apiParamsPassed}}).body
    }

    private suspend {{^isKotlin}}inline {{/isKotlin}}fun {{^isKotlin}}k{{/isKotlin}}{{operationId}}WithResponse({{>client/apiParamsDecleration}}): {{#returnType}}Response<{{{returnType}}}>{{/returnType}}{{^returnType}}Response<Nothing>{{/returnType}} {
        val response = httpClient.request {
            method = HttpMethod.parse("{{httpMethod}}")
            url("{{#removeLeadingSlash}}{{path}}{{/removeLeadingSlash}}"{{#pathParams}}.replace("{" + "{{baseName}}" + "}", {{#isContainer}}{{paramName}}.joinToString(","){{/isContainer}}{{^isContainer}}"${{{paramName}}}"{{/isContainer}}){{/pathParams}})
            appendHeaders(transactionId)
        {{#headerParams}}
            {{paramName}}{{^required}}?{{/required}}.also{ headers.append("{{baseName}}", it) }
        {{/headerParams}}
        {{#queryParams}}
            {{{paramName}}}{{^required}}?{{/required}}.also { url.parameters.{{#isContainer}}appendAll("{{{baseName}}}", it){{/isContainer}}{{^isContainer}}append("{{{baseName}}}", it.toString()){{/isContainer}} }
        {{/queryParams}}
        {{#hasBodyParam}}
            validateConstraints({{#bodyParam}}{{{paramName}}}{{/bodyParam}})
            contentType(ContentType.Application.Json)
            setBody({{#bodyParam}}{{{paramName}}}{{/bodyParam}})
        {{/hasBodyParam}}
        {{^hasBodyParam}}
            {{#hasFormParams}}
                {{#isMultipart}}
            setBody(MultiPartFormDataContent(formData {
                {{#formParams}}
                {{{paramName}}}?.apply { append("{{{baseName}}}", {{{paramName}}}) }
                {{/formParams}}
            })
                {{/isMultipart}}
                {{^isMultipart}}
            url.parameters.appendAll(ParametersBuilder().also {
                {{#formParams}}
                {{{paramName}}}?.apply { it.append("{{{baseName}}}", {{{paramName}}}.toString()) }
                {{/formParams}}
            }.build())
                {{/isMultipart}}
            {{/hasFormParams}}
        {{/hasBodyParam}}
        }
        throwIfError(response, "{{operationId}}")
        return {{^returnType}}EmptyResponse(response.status.value, response.headers.entries()){{/returnType}}{{#returnType}}Response(response.status.value, response.body<{{{returnType}}}>(), response.headers.entries()){{/returnType}}
    }
    {{^isKotlin}}

    /**
    * {{summary}}
    * {{notes}}
    {{#queryParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/queryParams}}{{#bodyParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/bodyParams}} {{#formParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/formParams}}{{#responses}}{{^is2xx}}* @throws ExpediaGroupApi{{{dataType}}}Exception{{/is2xx}}
    {{/responses}}* @return {{{returnType}}}{{^returnType}}Nothing{{/returnType}}
    */
    @Throws(
        {{#responses}}
            {{^is2xx}}
                ExpediaGroupApi{{{dataType}}}Exception::class{{^-last}},{{/-last}}
            {{/is2xx}}
        {{/responses}}
    )
    @JvmOverloads
    fun {{operationId}}({{>client/apiParamsDecleration}}) : {{{returnType}}}{{^returnType}}Nothing{{/returnType}} {
        return {{operationId}}WithResponse({{>client/apiParamsPassed}}).body
    }

    @JvmOverloads
    fun {{operationId}}WithResponse({{>client/apiParamsDecleration}}) : {{#returnType}}Response<{{{returnType}}}>{{/returnType}}{{^returnType}}Response<Nothing>{{/returnType}} {
        try {
            return GlobalScope.future(Dispatchers.IO) {
                k{{operationId}}WithResponse({{>client/apiParamsPassed}})
            }.get()
        } catch (exception: Exception) {
            if (exception is ExpediaGroupException) throw exception

            when (val cause = exception.cause) {
                is ExpediaGroupException -> throw cause
                else -> throw ExpediaGroupException("ExpediaGroup Error", exception)
            }
        }
    }
    {{/isKotlin}}
{{/operation}}

    internal suspend fun getFromLink(link: String): HttpResponse {
        return httpClient.request {
            method = HttpMethod.parse("GET")
            url(link)
            appendHeaders(UUID.randomUUID())
        }
    }

    {{>client/paginatorMethods}}
}
{{/operations}}