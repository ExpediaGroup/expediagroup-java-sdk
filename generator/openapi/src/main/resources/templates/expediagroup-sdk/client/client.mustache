{{#imports}}
import {{import}}
{{/imports}}

{{>imports/domain}}

{{>imports/core}}

{{>imports/helpers}}

{{>imports/defaults}}

/**
* {{{description}}}
*/
{{#operations}}
 class {{classname}} private constructor(clientConfiguration: {{>partials/clientConfiguration}}) : {{>partials/clientBase}}("{{namespace}}", clientConfiguration){
    {{>partials/helpers}}

    class Builder : {{>partials/clientBase}}.Builder<Builder>() {
        override fun build(): {{classname}} = {{classname}}(
            {{>partials/clientConfiguration}}(key, secret, endpoint, requestTimeout, maskedLoggingHeaders, maskedLoggingBodyFields {{>partials/authEndpoint}})
        )
    }

    companion object {
        @JvmStatic fun builder() = Builder()
    }

    override suspend fun throwServiceException(response: HttpResponse, operationId: String) {
        throw ErrorObjectMapper.process(response, operationId)
    }

{{#operation}}
    {{^isKotlin}}private {{/isKotlin}}suspend {{^isKotlin}}inline {{/isKotlin}}fun {{^isKotlin}}k{{/isKotlin}}{{operationId}}({{>client/apiParamsDecleration}}): {{{returnType}}}{{^returnType}}Nothing{{/returnType}} {
        return {{^isKotlin}}k{{/isKotlin}}{{operationId}}WithResponse({{>client/apiParamsPassed}}).body
    }

    private suspend {{^isKotlin}}inline {{/isKotlin}}fun {{^isKotlin}}k{{/isKotlin}}{{operationId}}WithResponse({{>client/apiParamsDecleration}}): {{#returnType}}Response<{{{returnType}}}>{{/returnType}}{{^returnType}}Response<Nothing>{{/returnType}} {
        val response = httpClient.request {
            method = HttpMethod.parse("{{httpMethod}}")
            url("{{#removeLeadingSlash}}{{path}}{{/removeLeadingSlash}}"{{#pathParams}}.replace("{" + "{{baseName}}" + "}", {{#isContainer}}{{paramName}}.joinToString(","){{/isContainer}}{{^isContainer}}"${{{paramName}}}"{{/isContainer}}){{/pathParams}})
            appendHeaders(transactionId)
        {{#headerParams}}
            {{paramName}}{{^required}}?{{/required}}.also{ headers.append("{{baseName}}", it) }
        {{/headerParams}}
        {{#queryParams}}
            {{{paramName}}}{{^required}}?{{/required}}.also { url.parameters.{{#isContainer}}appendAll("{{{baseName}}}", it){{/isContainer}}{{^isContainer}}append("{{{baseName}}}", it.toString()){{/isContainer}} }
        {{/queryParams}}
        {{#hasBodyParam}}
            validateConstraints({{#bodyParam}}{{{paramName}}}{{/bodyParam}})
            contentType(ContentType.Application.Json)
            setBody({{#bodyParam}}{{{paramName}}}{{/bodyParam}})
        {{/hasBodyParam}}
        {{^hasBodyParam}}
            {{#hasFormParams}}
                {{#isMultipart}}
            setBody(MultiPartFormDataContent(formData {
                {{#formParams}}
                {{{paramName}}}?.apply { append("{{{baseName}}}", {{{paramName}}}) }
                {{/formParams}}
            })
                {{/isMultipart}}
                {{^isMultipart}}
            url.parameters.appendAll(ParametersBuilder().also {
                {{#formParams}}
                {{{paramName}}}?.apply { it.append("{{{baseName}}}", {{{paramName}}}.toString()) }
                {{/formParams}}
            }.build())
                {{/isMultipart}}
            {{/hasFormParams}}
        {{/hasBodyParam}}
        }
        throwIfError(response, "{{operationId}}")
        return {{^returnType}}EmptyResponse(response.status.value, response.headers.entries()){{/returnType}}{{#returnType}}Response(response.status.value, response.body<{{{returnType}}}>(), response.headers.entries()){{/returnType}}
    }
    {{^isKotlin}}

    /**
    * {{summary}}
    * {{notes}}
    {{#queryParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/queryParams}}{{#bodyParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/bodyParams}} {{#formParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/formParams}}{{#responses}}{{^is2xx}}* @throws ExpediaGroupApi{{{dataType}}}Exception{{/is2xx}}
    {{/responses}}* @return {{{returnType}}}{{^returnType}}Nothing{{/returnType}}
    */
    @Throws(
    {{#responses}}
        {{^is2xx}}
            ExpediaGroupApi{{{dataType}}}Exception::class{{^-last}},{{/-last}}
        {{/is2xx}}
    {{/responses}}
    )
    @JvmOverloads
    fun {{operationId}}({{>client/apiParamsDecleration}}) : {{{returnType}}}{{^returnType}}Nothing{{/returnType}} {
        return {{operationId}}WithResponse({{>client/apiParamsPassed}}).body
    }

    /**
    * {{summary}}
    * {{notes}}
    {{#queryParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/queryParams}}{{#bodyParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/bodyParams}} {{#formParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/formParams}}{{#responses}}{{^is2xx}}* @throws ExpediaGroupApi{{{dataType}}}Exception{{/is2xx}}
    {{/responses}}* @return a [Response] object with a body of type {{{returnType}}}{{^returnType}}Nothing{{/returnType}}
    */
    @Throws(
    {{#responses}}
        {{^is2xx}}
            ExpediaGroupApi{{{dataType}}}Exception::class{{^-last}},{{/-last}}
        {{/is2xx}}
    {{/responses}}
    )
    @JvmOverloads
    fun {{operationId}}WithResponse({{>client/apiParamsDecleration}}) : {{#returnType}}Response<{{{returnType}}}>{{/returnType}}{{^returnType}}Response<Nothing>{{/returnType}} {
        try {
            return GlobalScope.future(Dispatchers.IO) {
                k{{operationId}}WithResponse({{>client/apiParamsPassed}})
            }.get()
        } catch (exception: Exception) {
            exception.handle()
        }
    }
    {{/isKotlin}}
{{/operation}}

    {{>client/paginatorMethods}}
}
{{/operations}}