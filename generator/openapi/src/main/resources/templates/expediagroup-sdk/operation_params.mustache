{{#operations}}
    {{#operation}}
        {{#hasNonBodyParams}}
            package com.expediagroup.sdk.{{namespace}}.operations

            import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
            import com.expediagroup.sdk.core.model.OperationParams

            import com.fasterxml.jackson.annotation.JsonProperty
            import com.fasterxml.jackson.databind.annotation.JsonDeserialize
            import io.ktor.http.Headers
            import io.ktor.http.Parameters

            import javax.validation.constraints.Max
            import javax.validation.constraints.Min
            import javax.validation.constraints.NotNull
            import javax.validation.constraints.Pattern
            import javax.validation.constraints.Size
            import javax.validation.Valid
            import javax.validation.Validation

            import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator

            /**
            {{#nonBodyParams}}
                {{#params}}
                    * @property {{{paramName}}} {{{description}}}
                {{/params}}
            {{/nonBodyParams}}
            */
            @JsonDeserialize(builder = {{classname}}Params.Builder::class)
            data class {{classname}}Params(
                {{#nonBodyParams}}
                    {{#params}}
                        {{>models/constraints}}
                        {{>modelMutable}} {{>client/apiParam}}{{^-last}}, {{/-last}}
                    {{/params}}
                {{/nonBodyParams}}
            ) : OperationParams {
                companion object {
                    @JvmStatic
                    fun builder() = Builder()
                }

                {{#nonBodyParams}}
                    {{#params}}
                        {{#isEnum}}
                            enum class {{enumName}}(
                                val value:
                                {{#isContainer}}{{{items.dataType}}}{{/isContainer}}
                                {{^isContainer}}{{dataType}}{{/isContainer}}
                            ) {
                                {{#allowableValues}}
                                    {{#enumVars}}
                                        {{name}}({{{value}}})
                                        {{^-last}},{{/-last}}
                                    {{/enumVars}}
                                {{/allowableValues}}
                            }
                        {{/isEnum}}
                    {{/params}}
                {{/nonBodyParams}}

                class Builder(
                    {{#nonBodyParams}}
                        {{#params}}
                            @JsonProperty("{{{baseName}}}") private var {{{paramName}}}: {{>partials/datatype}}? = null
                            {{^-last}},{{/-last}}
                        {{/params}}
                    {{/nonBodyParams}}
                ) {
                    {{#nonBodyParams}}
                        {{#params}}
                            /**
                            * @param {{{paramName}}} {{{description}}}
                            */
                            fun {{{paramName}}}({{{paramName}}}: {{>partials/datatype}}) = apply { this.{{{paramName}}} = {{{paramName}}} }
                        {{/params}}
                    {{/nonBodyParams}}

                    fun build(): {{classname}}Params {
                        val params = {{classname}}Params(
                            {{#nonBodyParams}}
                                {{#params}}
                                    {{{paramName}}} = {{{paramName}}}{{#required}}!!{{/required}}{{^-last}},{{/-last}}
                                {{/params}}
                            {{/nonBodyParams}}
                        )

                        validate(params)

                        return params
                    }

                    private fun validate(params: {{classname}}Params) {
                        val validator =
                            Validation
                                .byDefaultProvider()
                                .configure()
                                .messageInterpolator(ParameterMessageInterpolator())
                                .buildValidatorFactory()
                                .validator

                        val violations = validator.validate(params)

                        if (violations.isNotEmpty()) {
                            throw PropertyConstraintViolationException(
                                constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                            )
                        }
                    }
                }

                fun toBuilder() = Builder(
                    {{#nonBodyParams}}
                        {{#params}}
                            {{{paramName}}} = {{{paramName}}}{{^-last}},{{/-last}}
                        {{/params}}
                    {{/nonBodyParams}}
                )

                override fun getHeaders(): Headers {
                    return Headers.build {
                        {{#headerParams}}
                            {{paramName}}?.let {
                                append("{{baseName}}", it{{#isEnum}}.value{{/isEnum}})
                            }
                        {{/headerParams}}
                        {{#responses}}
                            {{#httpAcceptHeader}}
                                append("Accept", "{{mediaTypes}}")
                            {{/httpAcceptHeader}}
                        {{/responses}}
                    }
                }

                override fun getQueryParams(): Parameters {
                    return Parameters.build {
                        {{#queryParams}}
                            {{paramName}}?.let {
                                {{#isContainer}}
                                    appendAll("{{baseName}}", it{{#isEnum}}.map { it.value }{{/isEnum}})
                                {{/isContainer}}
                                {{^isContainer}}
                                    append("{{baseName}}", it{{#isEnum}}.value{{/isEnum}}{{^isString}}.toString(){{/isString}})
                                {{/isContainer}}
                            }
                        {{/queryParams}}
                    }
                }

                override fun getPathParams() : Map<String, String> {
                    return buildMap {
                        {{#pathParams}}
                            {{paramName}}?.also {
                                put("{{baseName}}", {{paramName}}{{#isEnum}}.value{{/isEnum}})
                            }
                        {{/pathParams}}
                    }
                }
            }
        {{/hasNonBodyParams}}
    {{/operation}}
{{/operations}}
