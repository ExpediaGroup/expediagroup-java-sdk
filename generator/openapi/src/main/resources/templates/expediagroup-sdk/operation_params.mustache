{{#operations}}
    {{#operation}}
        {{#hasNonBodyParams}}
            package com.expediagroup.sdk.{{namespace}}.operations

            import com.expediagroup.sdk.core.model.OperationParams

            /**
            {{#nonBodyParams}}
                {{#params}}
                    * @property {{{paramName}}} {{{description}}}
                {{/params}}
            {{/nonBodyParams}}
            */
            data class {{classname}}Params
            {{^isRapid}}
                (
                    {{#nonBodyParams}}
                        {{#params}}
                            {{>modelMutable}} {{>client/apiParam}}{{^-last}}, {{/-last}}
                        {{/params}}
                    {{/nonBodyParams}}
                )
            {{/isRapid}}
            {{#isRapid}}
                {{^isLinkable}}
                    (
                        {{#nonBodyParams}}
                            {{#params}}
                                {{>modelMutable}} {{>client/apiParam}}{{^-last}}, {{/-last}}
                            {{/params}}
                        {{/nonBodyParams}}
                    )
                {{/isLinkable}}
                {{#isLinkable}}
                    internal constructor(
                        {{#nonBodyParams}}
                            {{#params}}
                                {{>modelMutable}} {{{paramName}}}: {{{dataType}}}?
                                {{#defaultValue}} =
                                    {{^isNumber}}{{{defaultValue}}}{{/isNumber}}
                                    {{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}
                                {{/defaultValue}}
                                {{^defaultValue}} = null{{/defaultValue}}
                                ,
                            {{/params}}
                        {{/nonBodyParams}}
                        private val dummy: Unit
                    )
                {{/isLinkable}}
            {{/isRapid}}
            : OperationParams {
                companion object {
                    @JvmStatic
                    fun builder() = Builder()
                }

                {{#isRapid}}
                    {{#isLinkable}}
                        constructor(
                            {{#nonBodyParams}}
                                {{#params}}
                                    {{>client/apiParam}}{{^-last}}, {{/-last}}
                                {{/params}}
                            {{/nonBodyParams}}
                        ) : this(
                            {{#nonBodyParams}}
                                {{#params}}
                                    {{paramName}} = {{paramName}},
                                {{/params}}
                            {{/nonBodyParams}}
                            dummy = Unit
                        )

                        constructor(context: {{classname}}Context?) : this(
                            {{#headerParams}}
                                {{paramName}} = context?.{{paramName}}
                                {{#defaultValue}}
                                    {{^isNumber}} ?: {{{defaultValue}}}{{/isNumber}}
                                    {{#isNumber}} ?: {{{defaultValue}}}.toDouble(){{/isNumber}}
                                {{/defaultValue}}
                                ,
                            {{/headerParams}}
                            dummy = Unit
                        )
                    {{/isLinkable}}
                {{/isRapid}}

                {{#nonBodyParams}}
                    {{#params}}
                        {{#isEnum}}
                            enum class {{enumName}}(val value: {{dataType}}) {
                                {{#allowableValues}}
                                    {{#enumVars}}
                                        {{name}}({{{value}}})
                                        {{^-last}},{{/-last}}
                                    {{/enumVars}}
                                {{/allowableValues}}
                            }
                        {{/isEnum}}
                    {{/params}}
                {{/nonBodyParams}}

                class Builder(
                    {{#nonBodyParams}}
                        {{#params}}
                            private var {{{paramName}}}:
                            {{#isEnum}}
                                {{{enumName}}}
                            {{/isEnum}}
                            {{^isEnum}}
                                {{{dataType}}}
                            {{/isEnum}}
                            ? = null
                            {{^-last}},{{/-last}}
                        {{/params}}
                    {{/nonBodyParams}}
                ) {
                    {{#nonBodyParams}}
                        {{#params}}
                            /**
                            * @param {{{paramName}}} {{{description}}}
                            */
                            fun {{{paramName}}}(
                                {{{paramName}}}:
                                {{#isEnum}}
                                    {{{enumName}}}
                                {{/isEnum}}
                                {{^isEnum}}
                                    {{{dataType}}}
                                {{/isEnum}}
                            ) = apply { this.{{{paramName}}} = {{{paramName}}} }
                        {{/params}}
                    {{/nonBodyParams}}

                    fun build(): {{classname}}Params {
                        {{#hasRequiredParams}}
                            validateNullity()
                        {{/hasRequiredParams}}

                        return {{classname}}Params(
                            {{#nonBodyParams}}
                                {{#params}}
                                    {{{paramName}}} = {{{paramName}}}{{#required}}!!{{/required}}{{^-last}},{{/-last}}
                                {{/params}}
                            {{/nonBodyParams}}
                        )
                    }

                    {{#hasRequiredParams}}
                        private fun validateNullity() {
                            {{#nonBodyParams}}
                                {{#params}}
                                    {{#required}}
                                        if ({{{paramName}}} == null) {
                                            throw NullPointerException("Required parameter {{{paramName}}} is missing")
                                        }
                                    {{/required}}
                                {{/params}}
                            {{/nonBodyParams}}
                        }
                    {{/hasRequiredParams}}
                }

                override fun getHeaders(): Map<String, String> {
                    return buildMap {
                        {{#headerParams}}
                            {{paramName}}?.also {
                                put("{{baseName}}", {{paramName}}{{#isEnum}}.value{{/isEnum}})
                            }
                        {{/headerParams}}
                        {{#responses}}
                            {{#httpAcceptHeader}}
                                put("Accept", "{{mediaTypes}}")
                            {{/httpAcceptHeader}}
                        {{/responses}}
                    }
                }

                override fun getQueryParams(): Map<String, Iterable<String>> {
                    return buildMap {
                        {{#queryParams}}
                            {{paramName}}?.also {
                                put(
                                    "{{baseName}}",
                                    {{#isContainer}}{{paramName}}{{/isContainer}}
                                    {{^isContainer}}
                                            listOf({{paramName}}{{#isEnum}}.value{{/isEnum}}{{^isString}}.toString(){{/isString}})
                                    {{/isContainer}}
                                )
                            }
                        {{/queryParams}}
                    }
                }

                override fun getPathParams() : Map<String, String> {
                    return buildMap {
                        {{#pathParams}}
                            {{paramName}}?.also {
                                put("{{baseName}}", {{paramName}}{{#isEnum}}.value{{/isEnum}})
                            }
                        {{/pathParams}}
                    }
                }
            }
        {{/hasNonBodyParams}}
    {{/operation}}
{{/operations}}
