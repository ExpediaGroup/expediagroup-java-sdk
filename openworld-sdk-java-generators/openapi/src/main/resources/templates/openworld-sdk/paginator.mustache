{{#operations}}
class Paginator<T>(
    private val client: {{classname}},
    firstResponse: Response<T>,
    private val getBody: suspend (HttpResponse) -> T
) : Iterator<T> {
    private var state: ResponseState<T>
    var paginationTotalResults: Long?

    init {
        state = FirstResponseState(firstResponse)
        paginationTotalResults = extractPaginationTotalResults(firstResponse.headers)
    }

    override fun hasNext(): Boolean {
        return state.hasNext()
    }

    override fun next(): T {
        val response = state.getNextResponse()
        state = ResponseStateFactory.getState(extractLink(response.headers), client, getBody)
        return response.body
    }

    private fun extractPaginationTotalResults(headers: Map<String, List<String>>): Long? {
        return headers["pagination-total-results"]?.getOrNull(0)?.toLongOrNull()
    }

    private fun extractLink(headers: Map<String, List<String>>): String? {
        return headers["link"]?.getOrNull(0)?.split(";")?.let {
            if (it.isNotEmpty()) it[0] else null
        }?.let {
            it.substring(it.indexOf("<") + 1, it.indexOf(">"))
        }
    }
}

internal class FirstResponseState<T>(
    private val response: Response<T>
) : ResponseState<T> {
    override fun getNextResponse(): Response<T> {
        return response
    }

    override fun hasNext(): Boolean {
        return true
    }
}

internal class FetchLinkState<T>(
    private val link: String,
    private val client: {{classname}},
    private val getBody: suspend (HttpResponse) -> T
) : ResponseState<T> {
    override fun getNextResponse(): Response<T> {
        return runBlocking {
            val response = client.getFromLink(link)
            val body = getBody(response)
            Response(body, toHeadersMap(response.headers.entries()))
        }
    }

    override fun hasNext(): Boolean {
        return true
    }
}

internal class LastResponseState<T> : ResponseState<T> {
    override fun getNextResponse(): Response<T> {
        throw NoSuchElementException()
    }

    override fun hasNext(): Boolean {
        return false
    }
}

internal class ResponseStateFactory {
    companion object {
        fun <T> getState(link: String?, client: {{classname}}, getBody: suspend (HttpResponse) -> T): ResponseState<T> {
            return link?.let { FetchLinkState(it, client, getBody) } ?: LastResponseState()
        }
    }
}

internal interface ResponseState<T> {
    fun getNextResponse(): Response<T>
    fun hasNext(): Boolean
}
{{/operations}}