{{>licenseinfo}}

package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}

import com.expediagroup.sdk.core.client.openapi.OpenApiStub
import com.expediagroup.sdk.core.config.provider.FileConfigurationProvider
import com.expediagroup.sdk.core.configuration.ClientConfiguration
import io.ktor.client.call.body
{{#hasFormParams}}import io.ktor.client.request.forms.formData{{/hasFormParams}}
import io.ktor.client.request.request
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.http.HttpMethod
{{#hasFormParams}}import io.ktor.http.ParametersBuilder{{/hasFormParams}}
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.future.future

/**
* {{{description}}}
*/
{{#operations}}
open class {{classname}}(clientConfiguration: ClientConfiguration = ClientConfiguration.EMPTY) : OpenApiStub(clientConfiguration) {
    private val loader = FileConfigurationProvider()[javaClass.classLoader.getResource("sdk.properties")!!]

    private fun removeLeadingSlash(path: String): String {
         return path.slice(1 until path.length)
    }
    {{#operation}}
    private suspend inline fun k{{operationId}}({{#queryParams}}{{{paramName}}}: {{{dataType}}}{{#required}}{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{/required}}{{^required}}?{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{^defaultValue}} = null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}{{/queryParams}}{{#hasQueryParam}}{{#hasBodyParam}},{{/hasBodyParam}}{{/hasQueryParam}}{{#bodyParam}}{{{paramName}}}: {{{dataType}}}{{#required}}{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{/required}}{{^required}}?{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{^defaultValue}} = null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}{{/bodyParam}}{{^hasBodyParam}}{{#hasFormParam}},{{/hasFormParam}}{{/hasBodyParam}}{{#formParams}}{{{paramName}}}: {{{dataType}}}{{#required}}{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{/required}}{{^required}}?{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{^defaultValue}} = null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}{{/formParams}}): {{{returnType}}}{{^returnType}}Void?{{/returnType}} {
        val response = client.httpClient.request {
            method = HttpMethod.parse("{{httpMethod}}")
            url(removeLeadingSlash("{{path}}"){{#pathParams}}.replace("{" + "{{baseName}}" + "}", {{#isContainer}}{{paramName}}.joinToString(","){{/isContainer}}{{^isContainer}}"${{{paramName}}}"{{/isContainer}}){{/pathParams}})
            headers.append("x-sdk-title", loader.data()["sdk-title"]!!)
            headers.append("User-agent", "open-world-sdk/${loader.data()["sdk-version"]!!}")
            {{#headerParams}}
            headers.append("{{baseName}}", {{#consumes}}"{{{mediaType}}}"{{/consumes}}{{#isCollection}}.joinToString(separator = collectionDelimiter("{{collectionFormat}}"){{/isCollection}})
            {{/headerParams}}{{#queryParams}}
                {{{paramName}}}?.also { url.parameters.{{#isCollection}}appendAll("{{baseName}}", it){{/isCollection}}{{^isCollection}}append("{{baseName}}", it){{/isCollection}} }
            {{/queryParams}}{{#hasBodyParam}}
            setBody({{#bodyParam}}{{{paramName}}}{{/bodyParam}}){{/hasBodyParam}}
            {{^hasBodyParam}}
                {{#hasFormParams}}
                    {{#isMultipart}}
            setBody(MultiPartFormDataContent(formData {
                        {{#formParams}}
            {{{paramName}}}?.apply { append("{{{baseName}}}", {{{paramName}}}) }
                        {{/formParams}}
            })
                    {{/isMultipart}}
                    {{^isMultipart}}
            url.parameters.appendAll(ParametersBuilder().also {
                        {{#formParams}}
            {{{paramName}}}?.apply { it.append("{{{baseName}}}", {{{paramName}}}.toString()) }
                        {{/formParams}}
            })
                    {{/isMultipart}}
                {{/hasFormParams}}
            {{/hasBodyParam}}
        }
        throwIfError(response)
        return {{^returnType}}null{{/returnType}}{{#returnType}}response.body(){{/returnType}}
    }

    /**
     * {{summary}}
     * {{notes}}
    {{#queryParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/queryParams}}{{#bodyParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/bodyParams}} {{#formParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/formParams}}* @return {{{returnType}}}{{^returnType}}void{{/returnType}}
    */
    fun {{operationId}}({{#queryParams}}{{{paramName}}}: {{{dataType}}}{{#required}}{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{/required}}{{^required}}?{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{^defaultValue}} = null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}{{/queryParams}}{{#hasQueryParam}}{{#hasBodyParam}},{{/hasBodyParam}}{{/hasQueryParam}}{{#bodyParam}}{{{paramName}}}: {{{dataType}}}{{#required}}{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{/required}}{{^required}}?{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{^defaultValue}} = null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}{{/bodyParam}}{{^hasBodyParam}}{{#hasFormParam}},{{/hasFormParam}}{{/hasBodyParam}}{{#formParams}}{{{paramName}}}: {{{dataType}}}{{#required}}{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{/required}}{{^required}}?{{#defaultValue}} = {{^isNumber}}{{{defaultValue}}}{{/isNumber}}{{#isNumber}}{{{defaultValue}}}.toDouble(){{/isNumber}}{{/defaultValue}}{{^defaultValue}} = null{{/defaultValue}}{{/required}}{{^-last}},{{/-last}}{{/formParams}}) = GlobalScope.future(Dispatchers.IO) {
        k{{operationId}}({{#queryParams}}{{{paramName}}}{{^-last}},{{/-last}}{{/queryParams}}{{#hasQueryParam}}{{#hasBodyParam}},{{/hasBodyParam}}{{/hasQueryParam}}{{#bodyParam}}{{{paramName}}}{{^-last}},{{/-last}}{{/bodyParam}}{{#hasBodyParam}}{{#hasQueryParam}},{{/hasQueryParam}}{{/hasBodyParam}}{{#queryParam}}{{{paramName}}}{{^-last}},{{/-last}}{{/queryParam}})
    }

    {{/operation}}
}
{{/operations}}
