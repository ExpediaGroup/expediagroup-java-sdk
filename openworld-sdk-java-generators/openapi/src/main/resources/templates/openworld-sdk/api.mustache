{{>licenseInfo}}

package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}

{{#isRapid}}
import com.expediagroup.sdk.core.client.openapi.RapidOpenApiStub
{{/isRapid}}
{{^isRapid}}
import com.expediagroup.sdk.core.client.openapi.OpenApiStub
{{/isRapid}}
import com.expediagroup.sdk.core.config.provider.FileConfigurationProvider
import com.expediagroup.sdk.core.configuration.{{#isRapid}}Rapid{{/isRapid}}ClientConfiguration
import com.expediagroup.sdk.core.model.exception.OpenWorldException
import com.expediagroup.sdk.core.model.exception.client.*
import com.expediagroup.sdk.core.model.exception.service.*

import io.ktor.client.call.body
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.forms.formData
import io.ktor.client.request.request
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.http.HttpMethod
import io.ktor.http.contentType
import io.ktor.http.ContentType
import io.ktor.http.ParametersBuilder
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.future.future

/**
* {{{description}}}
*/
{{#operations}}
open class {{classname}}(clientConfiguration: {{#isRapid}}Rapid{{/isRapid}}ClientConfiguration = {{#isRapid}}Rapid{{/isRapid}}ClientConfiguration.EMPTY) : {{#isRapid}}RapidOpenApiStub{{/isRapid}}{{^isRapid}}OpenApiStub{{/isRapid}}(clientConfiguration) {
    private val loader = FileConfigurationProvider()[javaClass.classLoader.getResource("sdk.properties")!!]
    private val javaVersion = System.getProperty("java.version")
    private val operatingSystemName = System.getProperty("os.name")
    private val operatingSystemVersion = System.getProperty("os.version")
    private val userAgent = "open-world-sdk-{{#isKotlin}}kotlin{{/isKotlin}}{{^isKotlin}}java{{/isKotlin}}-{{namespace}}/${loader.data()["sdk-version"]!!} (Java $javaVersion; $operatingSystemName $operatingSystemVersion)"

    private fun removeLeadingSlash(path: String): String {
        return path.slice(1 until path.length)
    }

    private fun HttpRequestBuilder.appendHeaders() {
        headers.append("x-sdk-title", loader.data()["sdk-title"]!!)
        headers.append("User-agent", userAgent)
    }

{{#operation}}
    {{^isKotlin}}private {{/isKotlin}}suspend {{^isKotlin}}inline {{/isKotlin}}fun {{^isKotlin}}k{{/isKotlin}}{{operationId}}({{>apiParamsDecleration}}): {{{returnType}}}{{^returnType}}Void?{{/returnType}} {
        val response = client.httpClient.request {
            method = HttpMethod.parse("{{httpMethod}}")
            url(removeLeadingSlash("{{path}}"){{#pathParams}}.replace("{" + "{{baseName}}" + "}", {{#isContainer}}{{paramName}}.joinToString(","){{/isContainer}}{{^isContainer}}"${{{paramName}}}"{{/isContainer}}){{/pathParams}})
            appendHeaders()

        {{#headerParams}}
            {{paramName}}{{^required}}?{{/required}}.also{ headers.append("{{baseName}}", it) }
        {{/headerParams}}

        {{#queryParams}}
            {{{paramName}}}{{^required}}?{{/required}}.also { url.parameters.{{#isContainer}}appendAll("{{{baseName}}}", it){{/isContainer}}{{^isContainer}}append("{{{baseName}}}", it.toString()){{/isContainer}} }
        {{/queryParams}}

        {{#hasBodyParam}}
            contentType(ContentType.Application.Json)
            setBody({{#bodyParam}}{{{paramName}}}{{/bodyParam}})
        {{/hasBodyParam}}
        {{^hasBodyParam}}
            {{#hasFormParams}}
                {{#isMultipart}}
            setBody(MultiPartFormDataContent(formData {
                {{#formParams}}
                {{{paramName}}}?.apply { append("{{{baseName}}}", {{{paramName}}}) }
                {{/formParams}}
            })
                {{/isMultipart}}
                {{^isMultipart}}
            url.parameters.appendAll(ParametersBuilder().also {
                {{#formParams}}
                {{{paramName}}}?.apply { it.append("{{{baseName}}}", {{{paramName}}}.toString()) }
                {{/formParams}}
            }.build())
                {{/isMultipart}}
            {{/hasFormParams}}
        {{/hasBodyParam}}
        }
        throwIfError(response)
        return {{^returnType}}null{{/returnType}}{{#returnType}}response.body(){{/returnType}}
    }
    {{^isKotlin}}

    /**
    * {{summary}}
    * {{notes}}
    {{#queryParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/queryParams}}{{#bodyParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/bodyParams}} {{#formParams}} * @param {{{paramName}}} {{description}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}{{/required}}
    {{/formParams}}* @return {{{returnType}}}{{^returnType}}void{{/returnType}}
    */
    @JvmOverloads
    fun {{operationId}}({{>apiParamsDecleration}}) : {{{returnType}}}{{^returnType}}Void?{{/returnType}} {
        try {
            return GlobalScope.future(Dispatchers.IO) {
                k{{operationId}}({{>apiParamsPassed}})
            }.get()
        } catch (exception: Exception) {
            if (exception is OpenWorldException) throw exception

            when (val cause = exception.cause) {
                is OpenWorldException -> throw cause
                else -> throw OpenWorldException("OpenWorld Error", exception)
            }
        }
    }
    {{/isKotlin}}
{{/operation}}
}
{{/operations}}
