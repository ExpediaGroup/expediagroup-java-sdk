/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.expediagroup.openworld.sdk.fraudprevention.models


import com.fasterxml.jackson.annotation.JsonProperty
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.Length;

/**
 * The object used the describe an error, containing both human-readable and in a machine-readable information.
 * @param type A URI reference, compliant with the standard EG error type format, which identifies the error type. It provides a machine-readable identifier for the error type. The error type will be aligned with the HTTP status code of the response. The URI can either be absolute or relative to the API's base URI. When dereferenced, it can also provide human-readable documentation for the error type. 
 * @param detail A human-readable explanation of the error, specific to this error occurrence.
 */
data class Error(
    /* A URI reference, compliant with the standard EG error type format, which identifies the error type. It provides a machine-readable identifier for the error type. The error type will be aligned with the HTTP status code of the response. The URI can either be absolute or relative to the API's base URI. When dereferenced, it can also provide human-readable documentation for the error type.  */
@JsonProperty("type")

    
    
    
    
    @field:Valid
    val type: java.net.URI,

    /* A human-readable explanation of the error, specific to this error occurrence. */
@JsonProperty("detail")

    
    
    
    
    @field:Valid
    val detail: kotlin.String
) {

    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var type: java.net.URI? = null,
        private var detail: kotlin.String? = null
    ) {
        fun type(type: java.net.URI) = apply { this.type = type }
        fun detail(detail: kotlin.String) = apply { this.detail = detail }

        fun build(): Error {
            // Check required params
            validateNullity()
            return Error(
                type = type!!,
                detail = detail!!
            )
        }

        private fun validateNullity() {
            if (type == null) {
                throw NullPointerException("Required parameter type is missing")
            }
            if (detail == null) {
                throw NullPointerException("Required parameter detail is missing")
            }
        }
    }
}

