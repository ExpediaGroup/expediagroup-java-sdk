/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.expediagroup.openworld.sdk.fraudprevention.models


import com.fasterxml.jackson.annotation.JsonProperty
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.Length;

/**
 * Details related to the chargeback.
 * @param chargebackReason Reason for chargeback which can be `Fraud` or `Non Fraud`.
 * @param chargebackAmount Chargeback amount received by the partner.
 * @param currencyCode The 3-letter currency code defined in ISO 4217. https://www.currency-iso.org/dam/downloads/lists/list_one.xml.
 * @param bankReasonCode Unique code provided by the acquiring bank for the category of fraud.
 * @param chargebackReportedTimestamp Date and time when the chargeback was reported to the partner, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`.
 */
data class ChargebackDetail(
    /* Reason for chargeback which can be `Fraud` or `Non Fraud`. */
@JsonProperty("chargeback_reason")

    val chargebackReason: ChargebackDetail.ChargebackReason,

    /* Chargeback amount received by the partner. */
@JsonProperty("chargeback_amount")

    val chargebackAmount: kotlin.Double,

    /* The 3-letter currency code defined in ISO 4217. https://www.currency-iso.org/dam/downloads/lists/list_one.xml. */
@JsonProperty("currency_code")
@field:Pattern(regexp = "^[A-Z]{3}$")
    @field:Length(max = 200)
    
    
    
    @field:Valid
    val currencyCode: kotlin.String,

    /* Unique code provided by the acquiring bank for the category of fraud. */
@JsonProperty("bank_reason_code")

    @field:Length(max = 200)
    
    
    
    @field:Valid
    val bankReasonCode: kotlin.String? = null,

    /* Date and time when the chargeback was reported to the partner, in ISO-8061 date and time format `yyyy-MM-ddTHH:mm:ss.SSSZ`. */
@JsonProperty("chargeback_reported_timestamp")

    val chargebackReportedTimestamp: java.time.OffsetDateTime? = null
) {

    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var chargebackReason: ChargebackDetail.ChargebackReason? = null,
        private var chargebackAmount: kotlin.Double? = null,
        private var currencyCode: kotlin.String? = null,
        private var bankReasonCode: kotlin.String? = null,
        private var chargebackReportedTimestamp: java.time.OffsetDateTime? = null
    ) {
        fun chargebackReason(chargebackReason: ChargebackDetail.ChargebackReason) = apply { this.chargebackReason = chargebackReason }
        fun chargebackAmount(chargebackAmount: kotlin.Double) = apply { this.chargebackAmount = chargebackAmount }
        fun currencyCode(currencyCode: kotlin.String) = apply { this.currencyCode = currencyCode }
        fun bankReasonCode(bankReasonCode: kotlin.String) = apply { this.bankReasonCode = bankReasonCode }
        fun chargebackReportedTimestamp(chargebackReportedTimestamp: java.time.OffsetDateTime) = apply { this.chargebackReportedTimestamp = chargebackReportedTimestamp }

        fun build(): ChargebackDetail {
            // Check required params
            validateNullity()
            return ChargebackDetail(
                chargebackReason = chargebackReason!!,
                chargebackAmount = chargebackAmount!!,
                currencyCode = currencyCode!!,
                bankReasonCode = bankReasonCode,
                chargebackReportedTimestamp = chargebackReportedTimestamp
            )
        }

        private fun validateNullity() {
            if (chargebackReason == null) {
                throw NullPointerException("Required parameter chargebackReason is missing")
            }
            if (chargebackAmount == null) {
                throw NullPointerException("Required parameter chargebackAmount is missing")
            }
            if (currencyCode == null) {
                throw NullPointerException("Required parameter currencyCode is missing")
            }
        }
    }

    /**
     * Reason for chargeback which can be `Fraud` or `Non Fraud`.
     * Values: FRAUD,NON_FRAUD
     */
    enum class ChargebackReason(val value: kotlin.String) {
        @JsonProperty("FRAUD")
        FRAUD("FRAUD"),
        
        @JsonProperty("NON_FRAUD")
        NON_FRAUD("NON_FRAUD");
    }
}

