/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.expediagroup.openworld.sdk.fraudprevention.models

import com.expediagroup.openworld.sdk.fraudprevention.models.Amount
import com.expediagroup.openworld.sdk.fraudprevention.models.OrderPurchaseUpdateRequest
import com.expediagroup.openworld.sdk.fraudprevention.models.UpdateType

import com.fasterxml.jackson.annotation.JsonProperty
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.Length;

/**
 * 
 * @param acquirerReferenceNumber A unique number that tags a credit or debit card transaction when it goes from the merchant's bank through to the cardholder's bank.
 * @param refundDepositTimestamp Date and time when the refund was deposited to the original form of payment.
 * @param refundSettlementTimestamp Date and time when the 3rd party payment processor confirmed that a previously submitted payment refund has settled at the participating financial institutions.
 * @param settlementId Unique settlement identifier generated for a previously submitted payment refund.
 * @param refundAmount 
 */
data class RefundUpdate(
    @JsonProperty("type")

    
    
    
    
    @field:Valid
    override val type: UpdateType,

    /* The `risk_id` provided by Expedia's Fraud Prevention Service in the `OrderPurchaseScreenResponse`. */
@JsonProperty("risk_id")

    @field:Length(max = 200)
    
    
    
    @field:Valid
    override val riskId: kotlin.String,

    /* A unique number that tags a credit or debit card transaction when it goes from the merchant's bank through to the cardholder's bank. */
@JsonProperty("acquirer_reference_number")

    @field:Length(max = 200)
    
    
    
    @field:Valid
    val acquirerReferenceNumber: kotlin.String,

    /* Date and time when the refund was deposited to the original form of payment. */
@JsonProperty("refund_deposit_timestamp")

    val refundDepositTimestamp: java.time.OffsetDateTime,

    /* Date and time when the 3rd party payment processor confirmed that a previously submitted payment refund has settled at the participating financial institutions. */
@JsonProperty("refund_settlement_timestamp")

    val refundSettlementTimestamp: java.time.OffsetDateTime,

    /* Unique settlement identifier generated for a previously submitted payment refund. */
@JsonProperty("settlement_id")

    @field:Length(max = 200)
    
    
    
    @field:Valid
    val settlementId: kotlin.String,

    @JsonProperty("refund_amount")

    
    
    
    
    @field:Valid
    val refundAmount: Amount
) : OrderPurchaseUpdateRequest {

    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var type: UpdateType? = null,
        private var riskId: kotlin.String? = null,
        private var acquirerReferenceNumber: kotlin.String? = null,
        private var refundDepositTimestamp: java.time.OffsetDateTime? = null,
        private var refundSettlementTimestamp: java.time.OffsetDateTime? = null,
        private var settlementId: kotlin.String? = null,
        private var refundAmount: Amount? = null
    ) {
        fun type(type: UpdateType) = apply { this.type = type }
        fun riskId(riskId: kotlin.String) = apply { this.riskId = riskId }
        fun acquirerReferenceNumber(acquirerReferenceNumber: kotlin.String) = apply { this.acquirerReferenceNumber = acquirerReferenceNumber }
        fun refundDepositTimestamp(refundDepositTimestamp: java.time.OffsetDateTime) = apply { this.refundDepositTimestamp = refundDepositTimestamp }
        fun refundSettlementTimestamp(refundSettlementTimestamp: java.time.OffsetDateTime) = apply { this.refundSettlementTimestamp = refundSettlementTimestamp }
        fun settlementId(settlementId: kotlin.String) = apply { this.settlementId = settlementId }
        fun refundAmount(refundAmount: Amount) = apply { this.refundAmount = refundAmount }

        fun build(): RefundUpdate {
            // Check required params
            validateNullity()
            return RefundUpdate(
                type = type!!,
                riskId = riskId!!,
                acquirerReferenceNumber = acquirerReferenceNumber!!,
                refundDepositTimestamp = refundDepositTimestamp!!,
                refundSettlementTimestamp = refundSettlementTimestamp!!,
                settlementId = settlementId!!,
                refundAmount = refundAmount!!
            )
        }

        private fun validateNullity() {
            if (type == null) {
                throw NullPointerException("Required parameter type is missing")
            }
            if (riskId == null) {
                throw NullPointerException("Required parameter riskId is missing")
            }
            if (acquirerReferenceNumber == null) {
                throw NullPointerException("Required parameter acquirerReferenceNumber is missing")
            }
            if (refundDepositTimestamp == null) {
                throw NullPointerException("Required parameter refundDepositTimestamp is missing")
            }
            if (refundSettlementTimestamp == null) {
                throw NullPointerException("Required parameter refundSettlementTimestamp is missing")
            }
            if (settlementId == null) {
                throw NullPointerException("Required parameter settlementId is missing")
            }
            if (refundAmount == null) {
                throw NullPointerException("Required parameter refundAmount is missing")
            }
        }
    }
}

