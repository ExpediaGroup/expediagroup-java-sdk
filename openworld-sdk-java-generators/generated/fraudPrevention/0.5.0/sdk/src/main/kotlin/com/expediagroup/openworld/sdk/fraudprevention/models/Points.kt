/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.expediagroup.openworld.sdk.fraudprevention.models

import com.expediagroup.openworld.sdk.fraudprevention.models.Address
import com.expediagroup.openworld.sdk.fraudprevention.models.Amount
import com.expediagroup.openworld.sdk.fraudprevention.models.Name
import com.expediagroup.openworld.sdk.fraudprevention.models.Operations
import com.expediagroup.openworld.sdk.fraudprevention.models.Payment
import com.expediagroup.openworld.sdk.fraudprevention.models.PaymentMethod
import com.expediagroup.openworld.sdk.fraudprevention.models.PaymentReason
import com.expediagroup.openworld.sdk.fraudprevention.models.PaymentThreeDSCriteria

import com.fasterxml.jackson.annotation.JsonProperty
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.Length;

/**
 * 
 */
data class Points(
    /* Payment brand used for payment on this transaction. */
@JsonProperty("brand")

    @field:Length(max = 200)
    
    
    
    @field:Valid
    override val brand: kotlin.String,

    @JsonProperty("method")

    
    
    
    
    @field:Valid
    override val method: PaymentMethod,

    @JsonProperty("billing_name")

    
    
    
    
    @field:Valid
    override val billingName: Name,

    @JsonProperty("reason")

    
    
    
    
    @field:Valid
    override val reason: PaymentReason? = null,

    @JsonProperty("billing_address")

    
    
    
    
    @field:Valid
    override val billingAddress: Address? = null,

    /* Email address associated with the payment. */
@JsonProperty("billing_email_address")

    @field:Length(max = 200)
    
    
    
    @field:Valid
    override val billingEmailAddress: kotlin.String? = null,

    @JsonProperty("authorized_amount")

    
    
    
    
    @field:Valid
    override val authorizedAmount: Amount? = null,

    @JsonProperty("verified_amount")

    
    
    
    
    @field:Valid
    override val verifiedAmount: Amount? = null,

    @JsonProperty("three_digits_secure_criteria")

    
    
    
    
    @field:Valid
    override val threeDigitsSecureCriteria: PaymentThreeDSCriteria? = null,

    @JsonProperty("operations")

    
    
    
    
    @field:Valid
    override val operations: Operations? = null,

    /* Total amount refunded towards the transaction. */
@JsonProperty("total_refund_amount")

    override val totalRefundAmount: kotlin.Double? = null
) : Payment {

    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var brand: kotlin.String? = null,
        private var method: PaymentMethod? = null,
        private var billingName: Name? = null,
        private var reason: PaymentReason? = null,
        private var billingAddress: Address? = null,
        private var billingEmailAddress: kotlin.String? = null,
        private var authorizedAmount: Amount? = null,
        private var verifiedAmount: Amount? = null,
        private var threeDigitsSecureCriteria: PaymentThreeDSCriteria? = null,
        private var operations: Operations? = null,
        private var totalRefundAmount: kotlin.Double? = null
    ) {
        fun brand(brand: kotlin.String) = apply { this.brand = brand }
        fun method(method: PaymentMethod) = apply { this.method = method }
        fun billingName(billingName: Name) = apply { this.billingName = billingName }
        fun reason(reason: PaymentReason) = apply { this.reason = reason }
        fun billingAddress(billingAddress: Address) = apply { this.billingAddress = billingAddress }
        fun billingEmailAddress(billingEmailAddress: kotlin.String) = apply { this.billingEmailAddress = billingEmailAddress }
        fun authorizedAmount(authorizedAmount: Amount) = apply { this.authorizedAmount = authorizedAmount }
        fun verifiedAmount(verifiedAmount: Amount) = apply { this.verifiedAmount = verifiedAmount }
        fun threeDigitsSecureCriteria(threeDigitsSecureCriteria: PaymentThreeDSCriteria) = apply { this.threeDigitsSecureCriteria = threeDigitsSecureCriteria }
        fun operations(operations: Operations) = apply { this.operations = operations }
        fun totalRefundAmount(totalRefundAmount: kotlin.Double) = apply { this.totalRefundAmount = totalRefundAmount }

        fun build(): Points {
            // Check required params
            validateNullity()
            return Points(
                brand = brand!!,
                method = method!!,
                billingName = billingName!!,
                reason = reason,
                billingAddress = billingAddress,
                billingEmailAddress = billingEmailAddress,
                authorizedAmount = authorizedAmount,
                verifiedAmount = verifiedAmount,
                threeDigitsSecureCriteria = threeDigitsSecureCriteria,
                operations = operations,
                totalRefundAmount = totalRefundAmount
            )
        }

        private fun validateNullity() {
            if (brand == null) {
                throw NullPointerException("Required parameter brand is missing")
            }
            if (method == null) {
                throw NullPointerException("Required parameter method is missing")
            }
            if (billingName == null) {
                throw NullPointerException("Required parameter billingName is missing")
            }
        }
    }
}

