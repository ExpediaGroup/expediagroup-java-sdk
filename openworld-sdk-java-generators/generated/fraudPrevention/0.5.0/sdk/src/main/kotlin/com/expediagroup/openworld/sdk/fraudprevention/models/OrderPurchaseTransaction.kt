/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.expediagroup.openworld.sdk.fraudprevention.models

import com.expediagroup.openworld.sdk.fraudprevention.models.CustomerAccount
import com.expediagroup.openworld.sdk.fraudprevention.models.DeviceDetails
import com.expediagroup.openworld.sdk.fraudprevention.models.SiteInfo
import com.expediagroup.openworld.sdk.fraudprevention.models.TransactionDetails

import com.fasterxml.jackson.annotation.JsonProperty
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.Length;

/**
 * 
 * @param siteInfo 
 * @param deviceDetails 
 * @param customerAccount 
 * @param transactionDetails 
 * @param bypassRiskFlag A flag to indicate whether the client is ignoring the decision by Trust validation and proceeds to process the even in-case the outcome is ‘Reject’ or ‘Review’.
 */
data class OrderPurchaseTransaction(
    @JsonProperty("site_info")

    
    
    
    
    @field:Valid
    val siteInfo: SiteInfo,

    @JsonProperty("device_details")

    
    
    
    
    @field:Valid
    val deviceDetails: DeviceDetails,

    @JsonProperty("customer_account")

    
    
    
    
    @field:Valid
    val customerAccount: CustomerAccount,

    @JsonProperty("transaction_details")

    
    
    
    
    @field:Valid
    val transactionDetails: TransactionDetails,

    /* A flag to indicate whether the client is ignoring the decision by Trust validation and proceeds to process the even in-case the outcome is ‘Reject’ or ‘Review’. */
@JsonProperty("bypass_risk_flag")

    
    
    
    
    @field:Valid
    val bypassRiskFlag: kotlin.Boolean? = null
) {

    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var siteInfo: SiteInfo? = null,
        private var deviceDetails: DeviceDetails? = null,
        private var customerAccount: CustomerAccount? = null,
        private var transactionDetails: TransactionDetails? = null,
        private var bypassRiskFlag: kotlin.Boolean? = null
    ) {
        fun siteInfo(siteInfo: SiteInfo) = apply { this.siteInfo = siteInfo }
        fun deviceDetails(deviceDetails: DeviceDetails) = apply { this.deviceDetails = deviceDetails }
        fun customerAccount(customerAccount: CustomerAccount) = apply { this.customerAccount = customerAccount }
        fun transactionDetails(transactionDetails: TransactionDetails) = apply { this.transactionDetails = transactionDetails }
        fun bypassRiskFlag(bypassRiskFlag: kotlin.Boolean) = apply { this.bypassRiskFlag = bypassRiskFlag }

        fun build(): OrderPurchaseTransaction {
            // Check required params
            validateNullity()
            return OrderPurchaseTransaction(
                siteInfo = siteInfo!!,
                deviceDetails = deviceDetails!!,
                customerAccount = customerAccount!!,
                transactionDetails = transactionDetails!!,
                bypassRiskFlag = bypassRiskFlag
            )
        }

        private fun validateNullity() {
            if (siteInfo == null) {
                throw NullPointerException("Required parameter siteInfo is missing")
            }
            if (deviceDetails == null) {
                throw NullPointerException("Required parameter deviceDetails is missing")
            }
            if (customerAccount == null) {
                throw NullPointerException("Required parameter customerAccount is missing")
            }
            if (transactionDetails == null) {
                throw NullPointerException("Required parameter transactionDetails is missing")
            }
        }
    }
}

