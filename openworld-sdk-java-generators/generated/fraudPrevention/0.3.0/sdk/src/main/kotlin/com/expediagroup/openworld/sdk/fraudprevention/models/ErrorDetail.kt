/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.expediagroup.openworld.sdk.fraudprevention.models


import com.fasterxml.jackson.annotation.JsonProperty
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.Length;

/**
 * Error details in case of any errors.
 * @param code 
 * @param message Description of the error. Clients may choose to use the description field to display to end clients.
 * @param detailedMessage Detailed description of the error.
 */
data class ErrorDetail(
    @JsonProperty("code")

    val code: kotlin.Int? = null,

    /* Description of the error. Clients may choose to use the description field to display to end clients. */
@JsonProperty("message")

    @field:Length(max = 200)
    
    
    
    @field:Valid
    val message: kotlin.String? = null,

    /* Detailed description of the error. */
@JsonProperty("detailed_message")

    @field:Length(max = 500)
    
    
    
    @field:Valid
    val detailedMessage: kotlin.String? = null
) {

    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var code: kotlin.Int? = null,
        private var message: kotlin.String? = null,
        private var detailedMessage: kotlin.String? = null
    ) {
        fun code(code: kotlin.Int) = apply { this.code = code }
        fun message(message: kotlin.String) = apply { this.message = message }
        fun detailedMessage(detailedMessage: kotlin.String) = apply { this.detailedMessage = detailedMessage }

        fun build(): ErrorDetail {
            return ErrorDetail(
                code = code,
                message = message,
                detailedMessage = detailedMessage
            )
        }

    }
}

