/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.expediagroup.openworld.sdk.rapid.models

import com.expediagroup.openworld.sdk.rapid.models.Charge1

import com.fasterxml.jackson.annotation.JsonProperty
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.Length;

/**
 * The total price of charges, given various critera.  Inclusive provides the total price including taxes and fees.  This does not include hotel collected fees such as resort, mandatory taxes, and mandatory fees. Exclusive provides the total price excluding taxes and fees. Strikethrough provides the tax exclusive total price with any hotel funded discounts added back. Can be used to merchandise the savings due to a discount. Marketing fee provides the potential owed earnings per transaction. Gross profit provides the estimated gross profit per transaction. Minimum selling price provides the minimum selling price. Property fees provides the total of the fees collected by the property. 
 * @param inclusive 
 * @param exclusive 
 * @param strikethrough 
 * @param marketingFee 
 * @param grossProfit 
 * @param minimumSellingPrice 
 * @param propertyFees 
 */
data class Totals1(
    @JsonProperty("inclusive")

    
    
    
    
    @field:Valid
    val inclusive: Charge1? = null,

    @JsonProperty("exclusive")

    
    
    
    
    @field:Valid
    val exclusive: Charge1? = null,

    @JsonProperty("strikethrough")

    
    
    
    
    @field:Valid
    val strikethrough: Charge1? = null,

    @JsonProperty("marketing_fee")

    
    
    
    
    @field:Valid
    val marketingFee: Charge1? = null,

    @JsonProperty("gross_profit")

    
    
    
    
    @field:Valid
    val grossProfit: Charge1? = null,

    @JsonProperty("minimum_selling_price")

    
    
    
    
    @field:Valid
    val minimumSellingPrice: Charge1? = null,

    @JsonProperty("property_fees")

    
    
    
    
    @field:Valid
    val propertyFees: Charge1? = null
) {

    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var inclusive: Charge1? = null,
        private var exclusive: Charge1? = null,
        private var strikethrough: Charge1? = null,
        private var marketingFee: Charge1? = null,
        private var grossProfit: Charge1? = null,
        private var minimumSellingPrice: Charge1? = null,
        private var propertyFees: Charge1? = null
    ) {
        fun inclusive(inclusive: Charge1) = apply { this.inclusive = inclusive }
        fun exclusive(exclusive: Charge1) = apply { this.exclusive = exclusive }
        fun strikethrough(strikethrough: Charge1) = apply { this.strikethrough = strikethrough }
        fun marketingFee(marketingFee: Charge1) = apply { this.marketingFee = marketingFee }
        fun grossProfit(grossProfit: Charge1) = apply { this.grossProfit = grossProfit }
        fun minimumSellingPrice(minimumSellingPrice: Charge1) = apply { this.minimumSellingPrice = minimumSellingPrice }
        fun propertyFees(propertyFees: Charge1) = apply { this.propertyFees = propertyFees }

        fun build(): Totals1 {
            return Totals1(
                inclusive = inclusive,
                exclusive = exclusive,
                strikethrough = strikethrough,
                marketingFee = marketingFee,
                grossProfit = grossProfit,
                minimumSellingPrice = minimumSellingPrice,
                propertyFees = propertyFees
            )
        }

    }
}

