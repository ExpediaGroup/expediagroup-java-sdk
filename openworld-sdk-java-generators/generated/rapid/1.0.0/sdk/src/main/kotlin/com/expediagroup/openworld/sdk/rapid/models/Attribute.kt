/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.expediagroup.openworld.sdk.rapid.models


import com.fasterxml.jackson.annotation.JsonProperty
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import jakarta.validation.Valid;
import org.hibernate.validator.constraints.Length;

/**
 * An individual attribute.
 * @param id The attribute definition ID for this attribute.
 * @param name Attribute name.
 * @param `value` Attribute value.
 */
data class Attribute(
    /* The attribute definition ID for this attribute. */
@JsonProperty("id")

    
    
    
    
    @field:Valid
    val id: kotlin.String? = null,

    /* Attribute name. */
@JsonProperty("name")

    
    
    
    
    @field:Valid
    val name: kotlin.String? = null,

    /* Attribute value. */
@JsonProperty("value")

    
    
    
    
    @field:Valid
    val `value`: kotlin.String? = null
) {

    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var id: kotlin.String? = null,
        private var name: kotlin.String? = null,
        private var `value`: kotlin.String? = null
    ) {
        fun id(id: kotlin.String) = apply { this.id = id }
        fun name(name: kotlin.String) = apply { this.name = name }
        fun `value`(`value`: kotlin.String) = apply { this.`value` = `value` }

        fun build(): Attribute {
            return Attribute(
                id = id,
                name = name,
                `value` = `value`
            )
        }

    }
}

