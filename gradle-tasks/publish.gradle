publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.property("ARTIFACT_NAME")
            groupId = project.property("GROUP_ID")
            version = project.findProperty("SNAPSHOT_VERSION") ? project.findProperty("SNAPSHOT_VERSION") : project.property("VERSION")
            description = findProperty("DESCRIPTION")

            pom {
                name = project.property("ARTIFACT_NAME")
                description = findProperty("DESCRIPTION")
                url = project.property("POM_URL")

                licenses {
                    license {
                        name = project.property("LICENSE_NAME")
                        url = project.property("LICENSE_URL")
                        distribution = project.property("LICENSE_DISTRIBUTION")
                        comments = project.property("LICENSE_COMMENTS")
                    }
                }

                developers {
                    developer {
                        name = project.property("DEVELOPER_NAME")
                        organization = project.property("DEVELOPER_ORG")
                        organizationUrl = project.property("DEVELOPER_ORG_URL")
                    }
                }

                scm {
                    url = project.property("POM_SCM_URL")
                    connection = project.property("POM_SCM_CONNECTION")
                    developerConnection = project.property("POM_SCM_DEVELOPER_CONNECTION")
                }
            }
        }
    }

    repositories {
        maven {
            if (project.version.contains("SNAPSHOT")) {
                name = "oss-sonatype-snapshots"
                url = uri("https://oss.sonatype.org/content/repositories/snapshots")
            } else {
                name = "oss-sonatype-releases"
                url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2")
            }
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

signing {
    def signingKey = System.getenv("GPG_SECRET")
    def signingPassword = System.getenv("GPG_PASSPHRASE")

    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}
